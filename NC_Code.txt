##############===========R-package===============================##############
library(SCEVAN)
library(cowplot)
library(gridExtra)
library(miscTools)
library(phylogram)
library(infercnv)
library(copykat)
library(metapod)
library(scran)
library(ggrepel)
library(AnnoProbe)
library(GSVA)
library(SingleR)
library(ggVolcano)
library(tidyverse)
library(stringi)
library(KEGGREST)
library(org.Hs.eg.db)
library(ReactomePA)
library(reactome.db)
library(data.table)
library(ggVennDiagram)
library(RColorBrewer)
library(ggprism)
library(paletteer)
library(writexl)  
library(data.table)
library(ggplot2)
library(tidyverse)
library(devtools)
library(janitor)
library(RColorBrewer)
library(viridis)
library(ggpubr)
library(gridExtra)
library(Seurat)
#library(monocle3)
library(reshape2)
#install.packages('ggh4x')
library(ggh4x)
library(ggtext)
library(ggsci)
library(CellChat)
library(ComplexHeatmap)
library(devtools)
library(CellChat)
library(monocle)
library(survival)
library(survminer)
library(openxlsx)
library(ggprism)
library(tidyverse)
library(dplyr)
library(patchwork)
library(data.table)
library(gg.gap)
library(devtools)
library(utils)
library(limma)
library(utils)
library(EPIC)
library(GSVA)
library(xCell)
library(MCPcounter)
library(estimate)
library(fgsea)
library(GseaVis)
library(msigdb)   
library(GSEABase)
library(msigdbr)
library(org.Hs.eg.db)
library(clusterProfiler)
library(circlize)
library(ComplexHeatmap)
library(RColorBrewer)



###########===========================================================###################
###########==========Figure1 a-b & FigureS1 a-d==========############
setwd('F:\\NC_code\\Figure1A-B')
inputFile="GEO_17538_Matrix.txt"     #表达数据文件
#读取输入文件，并对输入文件整理
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
#判断数据是否取了log2,如果没有取log2,对数值自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
  rt[rt<0]=0
  rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)
#运行EPIC
epic=EPIC(bulk=data)
CAF_EPIC=epic$cellFractions[,"CAFs"]
outTab=rbind(ID=colnames(epic$cellFractions), epic$cellFractions)
write.table(outTab, file="score.EPIC.txt", sep="\t", quote=F, col.names=F)
#运行MCPcounter
MCPcounter.estimate <- MCPcounter.estimate(data,
                                           featuresType="HUGO_symbols",
                                           probesets=read.table("MCPcounter.probesets.txt",sep="\t",stringsAsFactors=FALSE,colClasses="character"),
                                           genes=read.table("MCPcounter.genes.txt",sep="\t",stringsAsFactors=FALSE,header=TRUE,colClasses="character",check.names=FALSE)
)
CAF_MCPcounter=MCPcounter.estimate["Fibroblasts",]
outTab=rbind(ID=colnames(MCPcounter.estimate), MCPcounter.estimate)
write.table(outTab, file="score.MCPcounter.txt", sep="\t", quote=F, col.names=F)
#运行estimate包,得到肿瘤微环境的打分
filterCommonGenes(input.f="GEO_17538_Matrix.txt", 
                  output.f="commonGenes.gct", 
                  id="GeneSymbol")
estimateScore(input.ds = "commonGenes.gct",
              output.ds="estimateScore.gct")
#对肿瘤微环境的打分进行整理, 输出每个样品的打分
scores=read.table("estimateScore.gct", skip=2, header=T)
rownames(scores)=scores[,1]
scores=t(scores[,3:ncol(scores)])
rownames(scores)=gsub("\\.", "\\-", rownames(scores))
StromalScore=scores[,"StromalScore"]
out=rbind(ID=colnames(scores), scores)
write.table(out, file="score.estimate.txt", sep="\t", quote=F, col.names=F)

#输出CAF打分
caf=cbind(CAF_EPIC, CAF_MCPcounter, StromalScore)
outTab=rbind(ID=colnames(caf), caf)
write.table(outTab, file="GEO_17538.CAF.txt", sep="\t", quote=F, col.names=F)
###Figure1a
time = fread('GSE17538_time.txt',data.table = F,header = T)
CAF_Score = fread('GEO_17538.CAF.txt',data.table = F,header = T) %>% subset(.$ID %in% time$id) %>% 
  .[match(time$id,.$ID),] 
identical(CAF_Score$ID,time$id)
inputdata = cbind(time,CAF_Score$CAF_MCPcounter)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/12
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))###此处依据surv_cutpoint函数计算得到最佳的截断值
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(MCP_score = inputdata$Score,
                               Group = res.cat$Score)

plot_boxplot <- function(data, x_col, y_col, fill_col, 
                         low_color = "#77BBFF", high_color = "#FFA3A3", 
                         alpha = 0.4, width = 0.6, cex = 0.5, 
                         outlier_color = "black", jitter_width = 0.2, 
                         jitter_size = 1.5, ylab = "MCP_counter Score", 
                         xlab = "", base_size = 15, 
                         comparisons = list(c(1, 2)), test = "wilcox.test", 
                         map_signif_level = FALSE, tip_length = 0.02, 
                         size = 1, textsize = 5, 
                         group_labels = c("low", "high"),  # 组别标签
                         group_n = c(243, 211),           # 自定义的 n 值
                         custom_text = NULL,              # 自定义文本（如 "GSE17538"）
                         p_value_y = NULL,                # p 值的 y 轴位置（可选）
                         text_offset = 0.1) {             # 文本相对于 p 值的垂直偏移（默认 10%）
  
  # 动态生成 x_labels
  x_labels <- paste0(group_labels, "\n(n = ", group_n, ")")
  
  p <- ggplot(data, aes(x = .data[[x_col]], y = .data[[y_col]], fill = .data[[fill_col]])) +
    scale_color_manual(values = c(low = low_color, high = high_color)) +
    scale_fill_manual(values = c(low = low_color, high = high_color)) +
    stat_boxplot(geom = 'errorbar', width = 0.2, cex = cex) +
    geom_boxplot(alpha = alpha, width = width, cex = cex, outlier.color = outlier_color) +
    geom_jitter(aes(color = .data[[fill_col]]), width = jitter_width, size = jitter_size) +
    theme_classic(base_size = base_size) +
    ylab(ylab) + xlab(xlab) +
    scale_x_discrete(labels = x_labels)+
    theme(legend.position = 'none')
  
  # 计算 p 值的默认 y 位置（如果没有手动指定）
  if (is.null(p_value_y)) {
    y_max <- max(data[[y_col]], na.rm = TRUE)
    p_value_y <- y_max * 1.05  # 默认在 y 轴最大值上方 5% 处
  }
  
  # 添加显著性检验（p 值）
  p <- p + geom_signif(
    comparisons = comparisons, 
    test = test, 
    map_signif_level = map_signif_level,
    tip_length = tip_length,
    size = size,
    textsize = textsize,
    y_position = p_value_y  # 设置 p 值的位置
  )
  
  # 如果提供了自定义文本，则添加到 p 值上方
  if (!is.null(custom_text)) {
    text_y <- p_value_y * (1 + text_offset)  # 在 p 值上方偏移一定比例
    p <- p + annotate(
      "text",
      x = mean(1:length(comparisons[[1]])),  # 居中显示
      y = text_y,
      label = custom_text,
      size = textsize,
      vjust = 0  # 确保文本底部对齐 y 位置
    )
  }
  
  return(p)
}

plot1 = plot_boxplot(boxplot_inputdata, 
             x_col = "Group", 
             y_col = "MCP_score", 
             fill_col = "Group",
             group_n = c(134, 98),
             custom_text = "GSE17538",
             text_offset = 0.05)
ggsave('.//MCP_counterScore_GSE17538.pdf',plot1,height = 6,width = 4)
###Figure1b
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
##
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
# 提取 HR 和 95% CI
HR = round(cox_summary$coefficients[2], 2)  # HR
HR_CI = round(cox_summary$conf.int[3:4], 3) # 95% CI
pdf('GSE17538_MCPcounter_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#77BBFF","#FFA3A3"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_MAPcounter",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',pValue,
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
###FigureS1a
inputdata = cbind(time,CAF_Score$CAF_EPIC)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/12
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))###此处依据surv_cutpoint函数计算得到最佳的截断值
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(EPIC_score = inputdata$Score,
                               Group = res.cat$Score)
table(boxplot_inputdata$Group)
plot3 = plot_boxplot(boxplot_inputdata, 
                     x_col = "Group", 
                     y_col = "EPIC_score", 
                     fill_col = "Group",
                     group_n = c(163, 69),
                     custom_text = "EPIC",
                     text_offset = 0.05,
                     low_color = "#F3CE40", 
                     high_color = "#0073C2",
                     ylab = "EPIC Score")
ggsave('.//EPIC_Score_GSE17538.pdf',plot3,height = 6,width = 4)
##FigureS1b
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
##
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
# 提取 HR 和 95% CI
HR = round(cox_summary$coefficients[2], 2)  # HR
HR_CI = round(cox_summary$conf.int[3:4], 3) # 95% CI
pdf('GSE17538_EPIC_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#F3CE40","#0073C2"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_EPIC",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',round(pValue,3),
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
##FigureS1c
inputdata = cbind(time,CAF_Score$StromalScore)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/12
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))###此处依据surv_cutpoint函数计算得到最佳的截断值
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(Stromal_score = inputdata$Score,
                               Group = res.cat$Score)
table(boxplot_inputdata$Group)
plot4 = plot_boxplot(boxplot_inputdata, 
                     x_col = "Group", 
                     y_col = "Stromal_score", 
                     fill_col = "Group",
                     group_n = c(150, 82),
                     custom_text = "ESTIMATE",
                     text_offset = 0.18,
                     low_color = "#CFC3D9", 
                     high_color = "#A5C1A8",
                     ylab = "Stromal Score")
ggsave('.//ESTIMATE_Score_GSE17538.pdf',plot4,height = 6,width = 4)
##FigureS1d
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
##
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
# 提取 HR 和 95% CI
HR = round(cox_summary$coefficients[2], 2)  # HR
HR_CI = round(cox_summary$conf.int[3:4], 3) # 95% CI
pdf('GSE17538_ESTIMATE_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#CFC3D9","#A5C1A8"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_ESTIMATE",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',round(pValue,3),
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
############===============FigureS1e-j======================#####################
setwd('F:\\NC_code\\FigureS1E-J')
inputFile="GEO_87211_Matrix.txt"     #表达数据文件
#读取输入文件，并对输入文件整理
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt = rt[!duplicated(rt$geneNames),]
rownames(rt) = rt$geneNames
rt = rt[,-1]
#判断数据是否取了log2,如果没有取log2,对数值自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
  rt[rt<0]=0
  rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)
#运行EPIC
epic=EPIC(bulk=data)
CAF_EPIC=epic$cellFractions[,"CAFs"]
outTab=rbind(ID=colnames(epic$cellFractions), epic$cellFractions)
write.table(outTab, file="score.EPIC.txt", sep="\t", quote=F, col.names=F)
#运行MCPcounter
MCPcounter.estimate <- MCPcounter.estimate(data,
                                           featuresType="HUGO_symbols",
                                           probesets=read.table("MCPcounter.probesets.txt",sep="\t",stringsAsFactors=FALSE,colClasses="character"),
                                           genes=read.table("MCPcounter.genes.txt",sep="\t",stringsAsFactors=FALSE,header=TRUE,colClasses="character",check.names=FALSE)
)
CAF_MCPcounter=MCPcounter.estimate["Fibroblasts",]
outTab=rbind(ID=colnames(MCPcounter.estimate), MCPcounter.estimate)
write.table(outTab, file="score.MCPcounter.txt", sep="\t", quote=F, col.names=F)
#运行estimate包,得到肿瘤微环境的打分
write.table(rt,'GEO_Matrix.txt',row.names = T,sep = '\t',quote = F)
filterCommonGenes(input.f="GEO_Matrix.txt", 
                  output.f="commonGenes.gct", 
                  id="GeneSymbol")
estimateScore(input.ds = "commonGenes.gct",
              output.ds="estimateScore.gct")
#对肿瘤微环境的打分进行整理, 输出每个样品的打分
scores=read.table("estimateScore.gct", skip=2, header=T)
rownames(scores)=scores[,1]
scores=t(scores[,3:ncol(scores)])
rownames(scores)=gsub("\\.", "\\-", rownames(scores))
StromalScore=scores[,"StromalScore"]
out=rbind(ID=colnames(scores), scores)
write.table(out, file="score.estimate.txt", sep="\t", quote=F, col.names=F)

#输出CAF打分
caf=cbind(CAF_EPIC, CAF_MCPcounter, StromalScore)
outTab=rbind(ID=colnames(caf), caf)
write.table(outTab, file="GEO_87211_CAF.txt", sep="\t", quote=F, col.names=F)
###FigureS1e
time = fread('GSE87211_time.txt',data.table = F,header = T)
CAF_Score = fread('GEO_87211_CAF.txt',data.table = F,header = T) %>% subset(.$ID %in% time$id) %>% 
  .[match(time$id,.$ID),] 
identical(CAF_Score$ID,time$id)
inputdata = cbind(time,CAF_Score$CAF_MCPcounter)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/365
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))###此处依据surv_cutpoint函数计算得到最佳的截断值
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(MCP_score = inputdata$Score,
                               Group = res.cat$Score)
table(boxplot_inputdata$Group)
plot5 = plot_boxplot(boxplot_inputdata, 
                     x_col = "Group", 
                     y_col = "MCP_score", 
                     fill_col = "Group",
                     group_n = c(103, 93),
                     custom_text = "MCPcounter",
                     text_offset = 0.05)
ggsave('MCPcounter_Score_GSE87211.pdf',plot5,height = 6,width = 4)
##FigureS1f
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
##
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
# 提取 HR 和 95% CI
HR = round(cox_summary$coefficients[2], 3)  # HR
HR_CI = round(cox_summary$conf.int[3:4], 3) # 95% CI
pdf('GSE87211_MCPcounter_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#77BBFF","#FFA3A3"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_MAPcounter",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P < ',round(pValue,3),
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
###FigureS1g
inputdata = cbind(time,CAF_Score$CAF_EPIC)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/365
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))###此处依据surv_cutpoint函数计算得到最佳的截断值
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(EPIC_score = inputdata$Score,
                               Group = res.cat$Score)
table(boxplot_inputdata$Group)
plot3 = plot_boxplot(boxplot_inputdata, 
                     x_col = "Group", 
                     y_col = "EPIC_score", 
                     fill_col = "Group",
                     group_n = c(91, 105),
                     custom_text = "EPIC",
                     text_offset = 0.05,
                     low_color = "#F3CE40", 
                     high_color = "#0073C2",
                     ylab = "EPIC Score")
ggsave('EPIC_Score_GSE87211.pdf',plot3,height = 6,width = 4)
###FigureS1h
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
##
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
# 提取 HR 和 95% CI
HR = round(cox_summary$coefficients[2], 2)  # HR
HR_CI = round(cox_summary$conf.int[3:4], 3) # 95% CI
pdf('GSE87211_EPIC_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#F3CE40","#0073C2"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_EPIC",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',round(pValue,3),
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
###FigureS1i
inputdata = cbind(time,CAF_Score$StromalScore)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/365
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))###此处依据surv_cutpoint函数计算得到最佳的截断值
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(Stromal_score = inputdata$Score,
                               Group = res.cat$Score)
table(boxplot_inputdata$Group)
plot4 = plot_boxplot(boxplot_inputdata, 
                     x_col = "Group", 
                     y_col = "Stromal_score", 
                     fill_col = "Group",
                     group_n = c(170, 26),
                     custom_text = "ESTIMATE",
                     text_offset = 0.18,
                     low_color = "#CFC3D9", 
                     high_color = "#A5C1A8",
                     ylab = "Stromal Score")
ggsave('ESTIMATE_Score_GSE87211.pdf',plot4,height = 6,width = 4)
###FigureS1j
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
##
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
# 提取 HR 和 95% CI
HR = round(cox_summary$coefficients[2], 3)  # HR
HR_CI = round(cox_summary$conf.int[3:4], 3) # 95% CI
pdf('GSE87211_ESTIMATE_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#CFC3D9","#A5C1A8"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_ESTIMATE",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',round(pValue,3),
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
###########===============Figure S25==============####
setwd('F:\\NC_code\\FigureS25')
data = fread('DN70-vs-RD-all.gene.csv',data.table = F,header = T)
data = data[,c(1,5,6,8,9)]
colnames(data) = c('Genes','FC','logFC','q.Value','group')
data$group = case_when(data$logFC >1 & data$q.Value < 0.05 ~ 'Up',
                       data$logFC < -1 & data$q.Value < 0.05 ~ 'Down',
                       TRUE ~ 'No change')
table(data$group)
colnames(data)[5] = 'regulate'
pdf('Volcano_Plot.pdf',width = 9,height = 8)
ggplot(data,aes(logFC, -log10(q.Value),color = regulate))+
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "#999999")+
  geom_vline(xintercept = c(-1,1), linetype = "dashed", color = "#999999")+
  geom_point(size = 1) +
  theme_bw(base_size = 12)+
  scale_color_manual(values = c('Down' = '#084A61',
                                'No Change' = "#AAE5F4",
                                'Up' = '#C1554E'))+
  theme(panel.grid = element_blank(),
        legend.position = 'right') +
  xlab("Log2(FoldChange)")+
  ylab("-Log10(FDR q-value)")+
  scale_x_continuous(limits = c(-5,5))+
  scale_y_continuous(limits = c(0,75))
dev.off()

###########==============Figure4d==================###########
setwd('F:\\NC_code\\Figure4d')
inputdata = fread('GO_Up_inputdata.csv',data.table = F,header = T)
colnames(inputdata)[5] = 'pvalue'
inputdata = inputdata[order(inputdata$Enrichment_score),]
inputdata$Term = factor(inputdata$Term,levels = inputdata$Term)
colors = c('#AD0B26','#F1605DFF','#FD9567FF','#FEC98DFF','#FCFDBFFF','white',
           "#DEF5E5FF","#BEE2EE","#9FCFE4","#5C8FC2","#40498EFF",'#353E99')
pdf('Figure4d_GO_bubbleplot.pdf',width = 8.5,height = 6)
ggplot(inputdata, 
       aes(x = Enrichment_score, 
           y = Term, 
           size = ListHits, 
           color = pvalue)) +
  geom_point(alpha = 1) +  
  scale_size(range = c(1, 5)) +  
  scale_color_gradientn(colours = colors,
                       values = scales::rescale(c(1:12)),
                       )+  
  labs(
    x = "Enrichment Score",  
    y = "",          
    size = "GeneNumber",    
    color = "pvalue"  
  ) +
  theme_bw() +  
  theme(
    axis.text.y = element_text(size = 12),  
    axis.text.x = element_text(size = 12),  
    axis.title = element_text(size = 14)    
  )
dev.off()
##########==============Figure4e=================####################
setwd('F:\\NC_code\\Figure4e')
inputdata = fread('KEGG_inputdata_Up.csv',data.table = F,header = T)
colnames(inputdata)[6] = 'pvalue'
inputdata = inputdata[order(inputdata$Enrichment_score),]
inputdata$Term = factor(inputdata$Term,levels = inputdata$Term)
pdf('Figure4e_KEGG_bubbleplot.pdf',width = 8.5,height = 6)
ggplot(inputdata, 
       aes(x = Enrichment_score, 
           y = Term, 
           size = ListHits, 
           color = pvalue)) +
  geom_point(alpha = 1) +  
  scale_size(range = c(1, 5)) +  
  scale_color_gradientn(colours = colors,
                        values = scales::rescale(c(1:12)),
  )+  
  labs(
    x = "Enrichment Score",  
    y = "",          
    size = "GeneNumber",    
    color = "pvalue"  
  ) +
  theme_bw() +  
  theme(
    axis.text.y = element_text(size = 12),  
    axis.text.x = element_text(size = 12),  
    axis.title = element_text(size = 14)    
  )
dev.off()
###############==============FigureS26==============################
setwd('F:\\NC_code\\FigureS26')
inputdata = fread('GO_Top_Down_inputdata.csv',data.table = F,header = T)
colnames(inputdata)[5] = 'pvalue'
inputdata = inputdata[order(inputdata$Enrichment_score),]
inputdata$Term = factor(inputdata$Term,levels = inputdata$Term)
pdf('FigureS26_GO_Down_bubbleplot.pdf',width = 8.5,height = 6)
ggplot(inputdata, 
       aes(x = Enrichment_score, 
           y = Term, 
           size = ListHits, 
           color = pvalue)) +
  geom_point(alpha = 1) +  
  scale_size(range = c(1, 5)) +  
  scale_color_gradientn(colours = colors,
                        values = scales::rescale(c(1:12)),
  )+  
  labs(
    x = "Enrichment Score",  
    y = "",          
    size = "GeneNumber",    
    color = "pvalue"  
  ) +
  theme_bw() +  
  theme(
    axis.text.y = element_text(size = 12),  
    axis.text.x = element_text(size = 12),  
    axis.title = element_text(size = 14)    
  )
dev.off()
###########============FigureS27=============##########
setwd('F:\\NC_code\\FigureS27')
inputdata = fread('KEGG_down_inputdata.csv',data.table = F,header = T)
colnames(inputdata)[6] = 'pvalue'
inputdata = inputdata[order(inputdata$Enrichment_score),]
inputdata$Term = factor(inputdata$Term,levels = inputdata$Term)
pdf('FigureS27_KEGG_Down_bubbleplot.pdf',width = 8.5,height = 6)
ggplot(inputdata, 
       aes(x = Enrichment_score, 
           y = Term, 
           size = ListHits, 
           color = pvalue)) +
  geom_point(alpha = 1) +  
  scale_size(range = c(1, 5)) +  
  scale_color_gradientn(colours = colors,
                        values = scales::rescale(c(1:12)),
  )+  
  labs(
    x = "Enrichment Score",  
    y = "",          
    size = "GeneNumber",    
    color = "pvalue"  
  ) +
  theme_bw() +  
  theme(
    axis.text.y = element_text(size = 12),  
    axis.text.x = element_text(size = 12),  
    axis.title = element_text(size = 14)    
  )
dev.off()

############=========Figure4f===========#########
setwd('F:\\NC_code\\Figure4f')
gene_fold_exp = fread('DN70-vs-RD-diff-q-val-0.05-FC-2.gene.xls',data.table = F,header = T)
gene_entrezid = bitr(geneID = gene_fold_exp$gene_id, 
                      fromType = "SYMBOL", 
                      toType = "ENTREZID", 
                      OrgDb = "org.Hs.eg.db")
head(gene_entrezid)
gene_entrezid$logFC = gene_fold_exp$log2FoldChange[match(gene_entrezid$SYMBOL, gene_fold_exp$gene_id)]
gene_entrezid = gene_entrezid[order(gene_entrezid$logFC,decreasing = T),]
genelist = gene_entrezid$logFC
names(genelist) = gene_entrezid$ENTREZID 
head(genelist)
GO_MF = msigdbr(species = "Homo sapiens", 
                category = "C5" , 
                subcategory = "GO:MF") %>% 
  dplyr::select(gs_name, entrez_gene)
gsea_res_GO_MF = GSEA(genelist, 
                 TERM2GENE = GO_MF,
                 minGSSize = 10,
                 maxGSSize = 500,
                 pvalueCutoff = 1,
                 pAdjustMethod = "BH"
)
pdf('GSEA_GOMF_cytokine_activity.pdf',width = 5,height = 5)
gseaNb(object = gsea_res_GO_MF,
       geneSetID = 'GOMF_CYTOKINE_ACTIVITY',
       addPval = T,
       curveCol = c('#76BA99'))
dev.off()
###########==============Figure4g============############
setwd('F:\\NC_code\\Figure4g')
gsea_KEGG_result = gseKEGG(geneList = genelist, 
                           organism = "hsa", 
                           pvalueCutoff = 1,
                           eps = 1e-20,
                           minGSSize = 5)
pdf('GSEA_KEGG_ferroptosis.pdf',width = 5,height = 5)
gseaNb(object = gsea_KEGG_result,
       geneSetID = 'hsa04216',
       addPval = T,
       curveCol = c('#76BA99'))
dev.off()
###########============FigureS28-S30============##########
GO = msigdbr(species = "Homo sapiens", 
                category = "C5" ) %>% 
  dplyr::select(gs_name, entrez_gene)
gsea_res_GO = GSEA(genelist, 
                      TERM2GENE = GO,
                      minGSSize = 1,
                      maxGSSize = 500,
                      pvalueCutoff = 1,
                      pAdjustMethod = "BH"
)
##FigureS28
setwd('F:\\NC_code\\FigureS28')
results_GO = gsea_res_GO@result
results_GO[which(grepl('CCR_CHEMOKINE_RECEPTOR_BINDING',results_GO$ID,ignore.case = T)),1]
candidate_pathways = c('GOMF_CCR_CHEMOKINE_RECEPTOR_BINDING',
                       'GOMF_C_X_C_CHEMOKINE_RECEPTOR_ACTIVITY')
for (i in candidate_pathways) {
  pdf_file = paste0("GSEA_", i, ".pdf")
  pdf(pdf_file, width = 5, height = 5)
  p1 = gseaNb(object = gsea_res_GO,
              geneSetID = i,
              addPval = TRUE,
              curveCol = c('#76BA99'),
              pvalX = 0.95,
              pvalY = 0.83)
  print(p1)
  dev.off()
}
candidate_pathways_KEGG = c('hsa04060','hsa04668','hsa04630','hsa04064','hsa04010')
for (i in candidate_pathways_KEGG) {
  pdf_file = paste0("GSEA_", i, ".pdf")
  pdf(pdf_file, width = 5, height = 5)
  p1 = gseaNb(object = gsea_KEGG_result,
         geneSetID = i,
         addPval = TRUE,
         curveCol = c('#76BA99'),
         pvalX = 0.95,
         pvalY = 0.83)
  print(p1)
  dev.off()
}
##FigureS29
setwd('F:\\NC_code\\FigureS29')
results_GO[which(grepl('WNT_PROTEIN_BINDING',results_GO$ID,ignore.case = T)),1]
pdf('GO_WNT_PROTEIN_BINDING.pdf', width = 5, height = 5)
gseaNb(object = gsea_res_GO,
            geneSetID = "GOMF_WNT_PROTEIN_BINDING",
            addPval = TRUE,
            curveCol = c('#76BA99'),
            pvalX = 0.95,
            pvalY = 0.83)
dev.off()
candidate_pathways_KEGG = c('hsa04310','hsa04350','hsa04151')
for (i in candidate_pathways_KEGG) {
  pdf_file = paste0("GSEA_", i, ".pdf")
  pdf(pdf_file, width = 5, height = 5)
  p1 = gseaNb(object = gsea_KEGG_result,
              geneSetID = i,
              addPval = TRUE,
              curveCol = c('#76BA99'),
              pvalX = 0.95,
              pvalY = 0.83)
  print(p1)
  dev.off()
}
##Figures30
setwd('F:\\NC_code\\FigureS30')
results_GO[which(grepl('cellular_response_to_copper',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('cytokine_activity',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('negative_regulation_of_growth',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('positive_regulation_of_MAP_kinase_activity',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('immune_response',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('collagen_containing_extracellular',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('regulation_of_cell_growth',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('cell_junction',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('cell_migration',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('multicellular_organism_development',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('adherens_junction',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('cell_adhesion',results_GO$ID,ignore.case = T)),1]
results_GO[which(grepl('angiogenesis',results_GO$ID,ignore.case = T)),1]
candidate_pathways_GO = c( "GOBP_CELLULAR_RESPONSE_TO_COPPER_ION",
                           "GOMF_CYTOKINE_ACTIVITY",
                           "GOBP_NEGATIVE_REGULATION_OF_GROWTH",
                           "GOBP_POSITIVE_REGULATION_OF_MAP_KINASE_ACTIVITY",
                           'GOBP_HUMORAL_IMMUNE_RESPONSE',
                           "GOCC_COLLAGEN_CONTAINING_EXTRACELLULAR_MATRIX",
                           "GOBP_REGULATION_OF_CELL_GROWTH",
                           "GOCC_CELL_CELL_JUNCTION",
                           'GOBP_MONONUCLEAR_CELL_MIGRATION',
                           "GOBP_MULTI_MULTICELLULAR_ORGANISM_PROCESS",
                           "GOCC_ADHERENS_JUNCTION",
                           "GOBP_CELL_ADHESION",
                           "GOBP_SPROUTING_ANGIOGENESIS" 
                           )
for (i in candidate_pathways_GO) {
  pdf_file = paste0("GSEA_", i, ".pdf")
  pdf(pdf_file, width = 5, height = 5)
  p1 = gseaNb(object = gsea_res_GO,
              geneSetID = i,
              addPval = TRUE,
              curveCol = c('#76BA99'),
              pvalX = 0.95,
              pvalY = 0.83)
  print(p1)
  dev.off()
}
candidate_pathways_KEGG = c('hsa04061','hsa04072','hsa05200','hsa04931','hsa04514',
                            'hsa04115','hsa04360','hsa05416','hsa04015','hsa04020',
                            'hsa05169')
for (i in candidate_pathways_KEGG) {
  pdf_file = paste0("GSEA_", i, ".pdf")
  pdf(pdf_file, width = 5, height = 5)
  p1 = gseaNb(object = gsea_KEGG_result,
              geneSetID = i,
              addPval = TRUE,
              curveCol = c('#76BA99'),
              pvalX = 0.95,
              pvalY = 0.83)
  print(p1)
  dev.off()
}
#########=============Figure4h==============##############
setwd('F:\\NC_code\\Figure4h')
heatmap_inputdata = fread('FC2_3_GO_combined_inputdata.csv',data.table = F,header = T)
heatmap_inputdata = column_to_rownames(heatmap_inputdata,var = 'id')
heatmap_inputdata = t(scale(t(heatmap_inputdata)))
mycol = colorRamp2(c(-1,0,1),c('#5C8FC2','white','#F1605DFF'))
pdf('CircoHeatmap_figure4h.pdf',width = 6,height = 6)
circos.par(gap.after = c(10),start.degree = 90,gap.degree = 30)
circos.heatmap(heatmap_inputdata,
               col = mycol,
               dend.side = 'inside',
               rownames.side = 'outside',
               rownames.col = 'black',
               cell.border = 'white',
               rownames.cex = 1,
               track.height = 0.3,
               dend.track.height = 0.2)
lg = Legend(title = '',col_fun = mycol)
grid.draw(lg)
#circos.clear()
dev.off()
###
Figure4h_Barplot_inputdata = fread('FD.csv',data.table = F,header = T)
Figure4h_Barplot_inputdata$gene_id = as.character(Figure4h_Barplot_inputdata$gene_id)
colored_labels = sapply(Figure4h_Barplot_inputdata$gene_id, function(x) {
  if(x == "CCR7" || x == "CCL3") {
    return(paste0("<span style='color:#AD0B26'>", x, "</span>"))
  } else if(x == "CXCL12") {
    return(paste0("<span style='color:#353E99'>", x, "</span>"))
  } else {
    return(x)  
  }
})
Figure4h_Barplot_inputdata$gene_id = factor(Figure4h_Barplot_inputdata$gene_id,
                                            levels = Figure4h_Barplot_inputdata$gene_id)
pdf('Figure4h_barplot.pdf',height = 5,width = 5)
ggplot(Figure4h_Barplot_inputdata, aes(x = gene_id, y = log2FoldChange, fill = group)) +
  geom_bar(stat = "identity", position = "identity", width = 0.7) +
  ggtext::geom_richtext(
    aes(y = 0, label = colored_labels),
    fill = NA,          
    label.color = NA,   
    hjust = 0.5,
    size = 5,
    position = position_nudge(y = ifelse(Figure4h_Barplot_inputdata$log2FoldChange > 0, -1, 1))
  ) +
  scale_y_continuous(expand = expansion(mult = c(0.1, 0.1)), breaks = c(-2, 0, 2, 4)) + 
  coord_flip() +  
  labs(title = "", x = "", y = "log2(FC)") +
  theme_classic() +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank()
  ) +
  geom_hline(yintercept = 0, color = "black", linewidth = 0.5) +
  scale_fill_manual(values = c('up' = '#F6C0C1', 'down' = '#AACDEB'))+
  theme(legend.position = 'none')
dev.off()
#########======================单细胞代码=================================###########
#################==============GSE132465=======================##############
setwd('F:\\NC_code\\单细胞\\GSE132465')
metadata = fread('GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz',data.table = F,header = T)
dge = readRDS('GSE132465_dge.rds')
metadata = subset(metadata,metadata$Index %in% rownames(dge@meta.data))
identical(metadata$Index,rownames(dge@meta.data))
dge@meta.data$Patient = metadata$Patient
dge@meta.data$Class = metadata$Class
dge@meta.data$Cell_type = metadata$Cell_type
dge@meta.data$Cell_subtype = metadata$Cell_subtype
Idents(dge) = dge@meta.data$Cell_type
DimPlot(dge)
###
mycolor = c(brewer.pal(n = 8, name = "Set2"),"#A65628","#E41A1C",brewer.pal(n=6,name = 'Dark2'))
[1] "#66C2A5" "#FC8D62" "#8DA0CB"
[4] "#E78AC3" "#A6D854" "#FFD92F"
[7] "#E5C494" "#B3B3B3" "#A65628"
[10] "#E41A1C"
pdf('GSE132465_Dotplot_NCL.pdf',
    height = 4,width = 6)
DotPlot(dge,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
###
plot1 = DimPlot(dge,
                cols = mycolor[1:6])+
  theme_bw()+
  theme(panel.grid = element_blank())
plot1
plot2 = FeaturePlot(dge,
            c('NCL'),
            #cols = plasma(10),
            pt.size = 0.1,
            order = T)+
  scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
  theme_bw()+
  theme(panel.grid = element_blank())
pdf('GSE132465_FeaturePlot_NCL.pdf',
    height = 4,width = 9)
grid.arrange(plot1,plot2,nrow = 1,widths = c(1.25,1))
dev.off()
###基因点图
pdf('GSE132465_Dotplot_MarkerGenes_NCL.pdf',
    height = 4,width = 6)
DotPlot(dge,
        features = c('EPCAM','CDH1',#Epi
                     'COL1A1','COL3A1',#Stromal
                     'CD14','FCGR3A',#Myeloid
                     'CD3E','CD3G',#T
                     'MS4A1','CD79A',#B
                     'KIT','IL1RL1','MS4A2',#Mast
          'NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
###FeaturePlot
marker_genes = c('EPCAM','CDH1','COL1A1','COL3A1','CD14','FCGR3A','CD3E','CD3G',
                 'MS4A1','CD79A','KIT','IL1RL1','MS4A2')
intersect_tls = intersect(marker_genes,rownames(dge)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(dge,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) #改变标题位置和字体大小
    )+
    xlab('')+
    ylab('')
    
})

lay = rbind(c(1,2,3,4,5,6,7),
            c(8,9,10,11,12,13,14))
legend = get_legend(
  FeaturePlot(object = dge, features = "EPCAM") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('GSE132465_Featureplot_MarkerGenes.pdf',
    height = 8,width = 28)
ggdraw() +
  draw_plot(combined_plot, 0, 0, 1, 1) + 
  draw_plot(legend, 0.95, 0.15, 0.2, 0.5)  
dev.off()

###小提琴图和pie图绘制NCL在不同细胞的表达和比例
Subgroup_Seurat = subset(dge,idents = c('Epithelial cells','Stromal cells','Myeloids'))
Subgroup_Seurat = Subgroup_Seurat %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.1) %>% 
  RunUMAP(dims = 1:20)

###SingleR注释
hpca.se = HumanPrimaryCellAtlasData()
SingleR_inputdata = GetAssayData(Subgroup_Seurat, slot="data")
singleR_results = SingleR(test = SingleR_inputdata,
                          ref = hpca.se, 
                          labels = hpca.se$label.main) 
Subgroup_Seurat@meta.data$SingleR_labels = singleR_results$labels
DimPlot(Subgroup_Seurat,group.by = 'SingleR_labels')
###人工注释
DimPlot(Subgroup_Seurat)
Plot1 = DimPlot(Subgroup_Seurat,
                cols = mycolor[1:6])+
  theme_bw()+
  theme(panel.grid = element_blank())
Plot2 = DotPlot(Subgroup_Seurat,
        features = c('CDH1','EPCAM',#epi
                     'CD163','CD68',#Macro
                     'COL1A1','DCN',#Fibro
                     'PECAM1','VWF',#EC
                     #'CD1C','CD1E',#cDC
                     'GZMB','IRF4',#pDC
                     'S100B','GPM6B'
        ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()


pdf('GSE132465_Dotplot_SubgroupMarkerGenes.pdf',
    height = 4,width = 10)
grid.arrange(Plot1,Plot2,nrow = 1,widths = c(1.25,1))
dev.off()

###SubgroupMarker_FeaturePlot
marker_genes = c('CDH1','EPCAM','CD163','CD68','COL1A1','DCN','PECAM1','VWF',
                 'GZMB','IRF4','S100B','GPM6B')
intersect_tls = intersect(marker_genes,rownames(Subgroup_Seurat)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(Subgroup_Seurat,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) #改变标题位置和字体大小
    )+
    xlab('')+
    ylab('')
  
})

lay = rbind(c(1,2,3,4,5,6),
            c(7,8,9,10,11,12))
legend = get_legend(
  FeaturePlot(object = dge, features = "EPCAM") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('GSE132465_Subgroup_Featureplot_MarkerGenes.pdf',
    height = 8,width = 28.5)
ggdraw() +
  draw_plot(combined_plot, 0, 0, 0.9, 1) + 
  draw_plot(legend, 0.95, 0.2, 0.3, 0.6)  
dev.off()



cluster9_conserved_markers = FindMarkers(Subgroup_Seurat,
                                                   ident.1 = 9,
                                                   grouping.var = "sample",
                                                   only.pos = TRUE,
                                                   logfc.threshold = 0.25)
cluster10_conserved_markers = FindMarkers(Subgroup_Seurat,
                                         ident.1 = 10,
                                         grouping.var = "sample",
                                         only.pos = TRUE,
                                         logfc.threshold = 0.25)

Subgroup_Seurat = RenameIdents(Subgroup_Seurat,
                               '0' = 'Epithelial_cells',
                               '1' = 'Macrophage',
                               '2' = 'Fibroblasts',
                               '3' = 'Fibroblasts',
                               '4' = 'Endothelial_cells',
                               '5' = 'Epithelial_cells',
                               '6' = 'Epithelial_cells',
                               '7' = 'Epithelial_cells',
                               '8' = 'Epithelial_cells',
                               '9' = 'pDC',
                               '10' = 'Enteric glial cells')
saveRDS(Subgroup_Seurat,'Subgroup_Seurat.rds')
###计算并绘制NCL在不同细胞类型中表达的小提琴图和饼图
Subgroup_Seurat@meta.data$final_Seurat = Idents(Subgroup_Seurat)
NCL_data = Seurat::FetchData(Subgroup_Seurat,
                             vars = c('NCL','final_Seurat'))
unique(NCL_data$final_Seurat)
NCL_data = filter(NCL_data,NCL_data$final_Seurat != 'Enteric glial cells')
NCL_data$final_Seurat = factor(NCL_data$final_Seurat,
                            levels = c('Epithelial_cells','Endothelial_cells',
                                       'Fibroblasts','Macrophage','pDC'))
vlnplot = ggplot(NCL_data, aes(x = final_Seurat, y = NCL, fill = final_Seurat)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c("#104680", "#317cb7",'#408FBF','#89BED9', "#BFDAE9"))+
  theme(legend.position  = 'None',
        panel.grid = element_blank(),
        text = element_text(size = 20))+
  ylim(0,8.5)+
  geom_signif(comparisons=list(c(1,3),
                               c(2,3),
                               c(4,3),
                               c(5,3)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(NCL_data$NCL)*1.05,
                             max(NCL_data$NCL)*1.2,
                             max(NCL_data$NCL)*1.35,
                             max(NCL_data$NCL)*1.5) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
# 生成每个分组的饼图 grob
NCL_data$expressed = ifelse(NCL_data$NCL>0,'expressed','not expressed')
proportation_data = NCL_data %>%
  group_by(final_Seurat,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$final_Seurat), function(grp) {
  sub_data <- subset(proportation_data, final_Seurat == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#104680','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(NCL_data$NCL) * 1.65,
      ymax = max(NCL_data$NCL) * 2.05
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp.pdf',
       vlnplot,height = 6.5,width = 9.5)
###计算NCL在正常和肿瘤EC中的表达差异
DimPlot(Subgroup_Seurat)
Idents(Subgroup_Seurat) = Subgroup_Seurat@meta.data$final_Seurat
EC_Seurat = subset(Subgroup_Seurat,idents = 'Endothelial cells')
EC_Seurat = EC_Seurat %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
#EC_Seurat = readRDS('EC_Seurat.rds')
DimPlot(EC_Seurat)
EC_Seurat = RenameIdents(EC_Seurat,
                         '0' = 'Tip EC',
                         '1' = 'Capillary EC',
                         '2' = 'Capillary EC',
                         '3' = 'Arterial EC',
                         '4' = 'Lymphatic EC',
                         '5' = 'Venous EC',
                         '6' = 'Tip EC')
Plot1 = DimPlot(EC_Seurat,
                cols = mycolor[1:6])+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.title = element_blank())


Plot2 = DotPlot(EC_Seurat,
        features = c('NID2','ESM1',#Tip_Tumor
                     'CA4','CD36',#Capillary_Normal
                     'FBLN5','GJA5',
                     'LYVE1','CCL21',#Lymphatic
                     'SELP','CPE'#Vein_Normal
        ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()


###FeaturePlot_EC_MarkerGenes
marker_genes = c('NID2','ESM1',#Tip_Tumor
                 'CA4','CD36',#Capillary_Normal
                 'FBLN5','GJA5',
                 'LYVE1','CCL21',#Lymphatic
                 'SELP','CPE'#Vein_Normal
)
intersect_tls = intersect(marker_genes,rownames(EC_Seurat)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(EC_Seurat,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) #改变标题位置和字体大小
    )+
    xlab('')+
    ylab('')
  
})

lay = rbind(c(1,2,3,4,5),
            c(6,7,8,9,10))
legend = get_legend(
  FeaturePlot(object = EC_Seurat, features = "NID2") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('GSE132465_Endothelial_Featureplot_MarkerGenes.pdf',
    height = 8,width = 28.5)
  ggdraw()+
  draw_plot(combined_plot, 0, 0, 0.9, 1) + 
  draw_plot(legend, 0.95, 0.2, 0.3, 0.6)  
dev.off()

###
EC_Seurat@meta.data$EC_Subgroup = Idents(EC_Seurat)

EC_Seurat = RenameIdents(EC_Seurat,
                         'Tip EC' = 'Tumor EC',
                         'Capillary EC' = 'Normal EC',
                         'Arterial EC' = 'Other EC',
                         'Lymphatic EC' = 'Other EC',
                         'Venous EC' = 'Other EC')
pdf('GSE132465_Endothelial_Dimplot_Tumor_Normal.pdf',
    height = 4,width = 5.5)
DimPlot(EC_Seurat,
        cols = mycolor[1:6])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()

EC_Seurat@meta.data$EC_group = Idents(EC_Seurat)
DimPlot(EC_Seurat,group.by = 'EC_group')

pdf('GSE132465_Endothelial_Dimplot_Tumor_Normal_Position.pdf',
    height = 4,width = 5.5)
DimPlot(EC_Seurat,
        cols = mycolor[1:6],
        group.by = 'Class')+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()

EC_NCL_data = Seurat::FetchData(EC_Seurat,
                                vars = c('NCL','EC_group'))
EC_NCL_data = filter(EC_NCL_data,EC_NCL_data$EC_group != 'Other EC')
EC_NCL_data$EC_group = factor(EC_NCL_data$EC_group,
                               levels = c('Normal EC','Tumor EC'))
table(EC_NCL_data$EC_group)
vlnplot = ggplot(EC_NCL_data, aes(x = EC_group, 
                                  y = NCL, 
                                  fill = EC_group)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c( "#317cb7",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank(),
        text = element_text(size = 20))+
  ylim(0,6)+
  geom_signif(comparisons=list(c(1,2)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(EC_NCL_data$NCL)*1.05) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
EC_NCL_data$expressed = ifelse(EC_NCL_data$NCL>0,'expressed','not expressed')
proportation_data = EC_NCL_data %>%
  group_by(EC_group,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$EC_group), function(grp) {
  sub_data <- subset(proportation_data, EC_group == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#317cb7','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(EC_NCL_data$NCL) * 1.5,
      ymax = max(EC_NCL_data$NCL) * 1.9
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp_in_EC.pdf',
       vlnplot,height = 5.5,width = 4.5)
###计算NCL在M1和M2中巨噬细胞中的表达(计算M1和M2的评分)
Subgroup_Seurat = readRDS('Subgroup_Seurat.rds')
Macrophage_Seurat = subset(Subgroup_Seurat,idents = 'Macrophage')
DimPlot(Subgroup_Seurat)
DimPlot(Macrophage_Seurat)
M1_GeneSet = c('IL12','IL23','IL12','TNF','IL6','CD86','IL1B','MARCO',
               'NOS2','IL12','CD64','CD80','CXCR10','IL23','CXCL9',
               'CXCL10','CXCL11','CD86','IL1A','IL1B','IL6','TNF',
               'CCL5','IRF5','IRF1','CD40','IDO1','KYNU','CCR7')
M2_GeneSet = c('ARG1','ARG2','IL10','CD32','CD163','CD23','CD200R1','PDCD1LG2',
               'CD274','MARCO','CSF1R','CD206','IL1RN','IL1R2','IL4R','CCL4',
               'CCL13','CCL20','CCL17','CCL18','CCL22','CCL24','LYVE1','VEGFA',
               'VEGFB','VEGFC','VEGFD','EGF','CTSA','CTSB','CSTC','CTSD','TGFB1',
               'TGFB2','TGFB3','MMP14','MMP19','MMP9','CLEC7A','WNT7B','FASL',
               'TNFSF12','TNFSF8','CD276','VTCN1','MSR1','FN1','IRF4')
Pro_inflammatory = c('IL1B','TNF','CCL2','CCL3','CCL5','CCL7','CCL8','CCL13','CCL17','CCL22')
Anti_inflammatory = c('IL1RN','IL10','IL4','IL11','IL13','TGFB1','TNFRSF1A','TNFRSF1B',
                      'IL1R2','IL18BP')
Macro_Score_gene_sets = list(
  M1 = M1_GeneSet,
  M2 = M2_GeneSet
)
Macrophage_Seurat =  Macrophage_Seurat  %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)


saveRDS(Macrophage_Seurat,'Macrophage_Seurat.rds')
saveRDS(EC_Seurat,'EC_Seurat.rds')
saveRDS(EC_Seurat,'EC_Seurat.rds')
saveRDS(Myeloid_Seurat,'Myeloid_Seurat.rds')
saveRDS(Subgroup_Seurat,'Four_Subgroup_Seurat.rds')
####GSE132465_Macrophage_M1_M2评分_proinfla_antiinfla_Score
setwd('F:\\NC_code\\单细胞\\GSE132465')
Macrophage_Seurat_GSE132465 = readRDS('Macrophage_Seurat.rds')

pdf('GSE132465_Macrophage_Subgroup_Dimplot.pdf',
    height = 4,width = 5.5)
DimPlot(Macrophage_Seurat_GSE132465,
        cols = mycolor[1:9])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()


pdf('GSE132465_Macrophage_MarkerGenes.pdf',
    height = 6,width = 6)
DotPlot(Macrophage_Seurat_GSE132465,
        features = c('IL12B','IL23A','TNF','IL6','CD86',#M1
                     'ARG1','ARG2','IL10','FCGR2A','CD163',#M2
                     'IL1B','CCL2','CCL3','CCL5','CCL7',#Inf
                     'IL1RN','IL4','IL11','IL13','TGFB1'#Anti
                     ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()

####Macrophage的M1和M2评分
macro_cells = AddModuleScore(Macrophage_Seurat_GSE132465, features = list(M1_GeneSet), name = "M1_score")
macro_cells = AddModuleScore(macro_cells, features = list(M2_GeneSet), name = "M2_score")
Macrophage_Seurat_GSE132465@meta.data$M1_Score = macro_cells@meta.data$M1_score1
Macrophage_Seurat_GSE132465@meta.data$M2_Score = macro_cells@meta.data$M2_score1
###Macrophage的pro-infla和anti-infla评分
Infla_anti = AddModuleScore(Macrophage_Seurat_GSE132465, features = list(Pro_inflammatory), name = "Pro_inflammatory_score")
Infla_anti = AddModuleScore(Infla_anti, features = list(Anti_inflammatory), name = "Anti_inflammatory_score")
Macrophage_Seurat_GSE132465@meta.data$Pro_infla_score = Infla_anti@meta.data$Pro_inflammatory_score1
Macrophage_Seurat_GSE132465@meta.data$Anti_infla_score = Infla_anti@meta.data$Anti_inflammatory_score1

umap_df_M_ploar = Embeddings(Macrophage_Seurat_GSE132465, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat_GSE132465@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, M1_Score, M2_Score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_M_polar = umap_df_M_ploar %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_M1 = mean(M1_Score),
    mean_M2 = mean(M2_Score),
    .groups = 'drop')
pdf('GSE132465_ScattorPlot_Macrophage_M1_M2_AddModuleScore.pdf',height = 5,
    width = 7.5)
ggplot(umap_df_M_ploar, aes(x = M1_Score, y = M2_Score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_M_polar,
    aes(x = mean_M1, y = mean_M2, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
###促炎和抗炎Macro
umap_df_infla_anti = Embeddings(Macrophage_Seurat_GSE132465, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat_GSE132465@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, Pro_infla_score, Anti_infla_score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_infla_anti = umap_df_infla_anti %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_Pro_infla_score = mean(Pro_infla_score),
    mean_Anti_infla_score = mean(Anti_infla_score),
    .groups = 'drop')
pdf('GSE132465_ScattorPlot_Macrophage_proinflammatory_antiinflammatory_Score.pdf',height = 5,
    width = 7.5)
ggplot(umap_df_infla_anti, aes(x = Pro_infla_score, y = Anti_infla_score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_infla_anti,
    aes(x = mean_Pro_infla_score, y = mean_Anti_infla_score, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
pdf('NCL_In_7_Macrophage_Dotplot.pdf',width = 5,height = 1.5)
DotPlot(Macrophage_Seurat_GSE132465,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'),
        group.by = 'RNA_snn_res.0.3')+
  theme_bw()+
  theme(panel.grid = element_blank())+
  xlab('')+
  ylab('')+
  coord_flip()+
  theme(
    legend.key.size = unit(0.15, "cm"),      
    legend.text = element_text(size = 4),   
    legend.spacing.y = unit(0.15, "cm")      
  )
dev.off()
saveRDS(Macrophage_Seurat_GSE132465,'F:\\NC_code\\单细胞\\GSE132465\\Macrophage_Seurat.rds')

setwd('F:\\NC_code\\单细胞\\GSE132465')
Macrophage_Seurat_GSE132465 = readRDS('Macrophage_Seurat.rds')
DimPlot(Macrophage_Seurat_GSE132465)
metadta = Macrophage_Seurat_GSE132465@meta.data
metadta$M_Subgroup = ifelse(metadta$RNA_snn_res.0.3 == '0' |
                              metadta$RNA_snn_res.0.3 == '5' |
                                metadta$RNA_snn_res.0.3 == '7','M2-like','Others')
Macrophage_Seurat_GSE132465@meta.data = metadta
Idents(Macrophage_Seurat_GSE132465) = Macrophage_Seurat_GSE132465@meta.data$M_Subgroup
DimPlot(Macrophage_Seurat_GSE132465)
pdf('Macrophage_M2_Seurat_GSE132465_Dimplot.pdf',width = 5.5,height = 4)
DimPlot(Macrophage_Seurat_GSE132465,
        cols = mycolor[1:3])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
pdf('NCL_M2_Macrophage_Dotplot.pdf',width = 3.5,height = 1.75)
DotPlot(Macrophage_Seurat_GSE132465,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank())+
  xlab('')+
  ylab('')+
  coord_flip()+
  theme(
    legend.key.size = unit(0.1, "cm"),      
    legend.text = element_text(size = 5),   
    legend.spacing.y = unit(0.1, "cm")      
  )
dev.off()
pdf('Macrophage_Seurat_GSE132465_NCL_Feature.pdf',width = 5,height = 4)
FeaturePlot(Macrophage_Seurat_GSE132465,
            c('NCL'),
            #cols = plasma(10),
            pt.size = 0.1,
            order = T)+
  scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()

Mac_data = Seurat::FetchData(Macrophage_Seurat_GSE132465,
                             vars = c('NCL','M_Subgroup'))
unique(Mac_data$M_Subgroup)
table(Mac_data$M_Subgroup)
Mac_data$M_Subgroup = factor(Mac_data$M_Subgroup,
                        levels = c('M2-like','Others'))
DotPlot(Macrophage_Seurat_GSE132465,'NCL')
vlnplot = ggplot(Mac_data, aes(x = M_Subgroup, y = NCL, fill = M_Subgroup)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c("#6dadd1",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank(),
        text = element_text(size = 20))+
  ylim(0,7)+
  geom_signif(comparisons=list(c(1,2)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(NCL_data$NCL)*1.05,
                             max(NCL_data$NCL)*1.2,
                             max(NCL_data$NCL)*1.35) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
# 生成每个分组的饼图 grob
NCL_data$expressed = ifelse(NCL_data$NCL>0,'expressed','not expressed')
proportation_data = NCL_data %>%
  group_by(group,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$group), function(grp) {
  sub_data <- subset(proportation_data, group == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#104680','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(NCL_data$NCL) * 1.5,
      ymax = max(NCL_data$NCL) * 1.9
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp.pdf',
       vlnplot,height = 6.5,width = 9.5)




##############=================GSE144735=================############
setwd('F:\\NC_code\\单细胞\\GSE144735')
dge = readRDS('GSE144735_dge.rds')
DimPlot(dge)
dge = RenameIdents(dge,
                   'Smooth_muscle_cells' = 'Fibroblasts')

pdf('GSE144735_Dotplot_MarkerGenes_NCL.pdf',
    height = 5,width = 6)
DotPlot(dge,
        features = c('COL1A1','COL3A1',#Stromal
                     'CD163','CD68',#Mac
                     'S100B','GPM6B',#Glia
                     'KIT','IL1RL1',#Mast
                     'EPCAM','CDH1',#Epi
                     'MS4A1','CD79A',#B
                     'CD3E','CD3G',#T
                     'PECAM1','VWF',#Endo
                     'NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
###
pdf('GSE144735_Dotplot_NCL.pdf',
    height = 4,width = 6.5)
DotPlot(dge,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
###FeaturePlot
marker_genes = c('COL1A1','COL3A1',#Stromal
                 'CD163','CD68',#Mac
                 'S100B','GPM6B',#Glia
                 'KIT','IL1RL1',#Mast
                 'EPCAM','CDH1',#Epi
                 'MS4A1','CD79A',#B
                 'CD3E','CD3G',#T
                 'PECAM1','VWF'#Endo
                 )
intersect_tls = intersect(marker_genes,rownames(dge)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(dge,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) #改变标题位置和字体大小
    )+
    xlab('')+
    ylab('')
  
})

lay = rbind(c(1,2,3,4,5,6,7,8),
            c(9,10,11,12,13,14,15,16))
legend = get_legend(
  FeaturePlot(object = dge, features = "EPCAM") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('GSE144735_Featureplot_MarkerGenes.pdf',
    height = 8,width = 32)
ggdraw() +
  draw_plot(combined_plot, 0, 0, 0.95, 1) + 
  draw_plot(legend, 0.95, 0.25, 0.2, 0.5)  
dev.off()
###
plot1 = DimPlot(dge,
                cols = mycolor[1:8])+
  theme_bw()+
  theme(panel.grid = element_blank())
plot1
plot2 = FeaturePlot(dge,
                    c('NCL'),
                    #cols = plasma(10),
                    pt.size = 0.1,
                    order = T)+
  scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
  theme_bw()+
  theme(panel.grid = element_blank())
pdf('GSE144735_FeaturePlot_NCL.pdf',
    height = 4,width = 10)
grid.arrange(plot1,plot2,nrow = 1,widths = c(1.25,1))
dev.off()
###小提琴图和pie图绘制NCL在不同细胞的表达和比例
Subgroup_Seurat = subset(dge,idents = c('Epithelial_cells','Fibroblasts','Macrophage','Endothelial_cells'))
pdf('Subgroup_Dimplot.pdf',width = 5.7,height = 4)
DimPlot(Subgroup_Seurat,
        cols = mycolor[1:4])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
###计算并绘制NCL在不同细胞类型中表达的小提琴图和饼图
Subgroup_Seurat@meta.data$group = Idents(Subgroup_Seurat)
NCL_data = Seurat::FetchData(Subgroup_Seurat,
                             vars = c('NCL','group'))
unique(NCL_data$group)
NCL_data$group = factor(NCL_data$group,
                        levels = c('Epithelial_cells','Endothelial_cells',
                                   'Fibroblasts','Macrophage'))
vlnplot = ggplot(NCL_data, aes(x = group, y = NCL, fill = group)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c("#104680", "#317cb7", "#6dadd1",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank(),
        text = element_text(size = 20))+
  ylim(0,7)+
  geom_signif(comparisons=list(c(1,3),
                               c(2,3),
                               c(4,3)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(NCL_data$NCL)*1.05,
                             max(NCL_data$NCL)*1.2,
                             max(NCL_data$NCL)*1.35) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
# 生成每个分组的饼图 grob
NCL_data$expressed = ifelse(NCL_data$NCL>0,'expressed','not expressed')
proportation_data = NCL_data %>%
  group_by(group,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$group), function(grp) {
  sub_data <- subset(proportation_data, group == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#104680','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(NCL_data$NCL) * 1.5,
      ymax = max(NCL_data$NCL) * 1.9
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp.pdf',
       vlnplot,height = 6.5,width = 9.5)
###计算NCL在正常和肿瘤EC中的表达差异
DimPlot(Subgroup_Seurat)
EC_Seurat = subset(Subgroup_Seurat,idents = 'Endothelial_cells')
EC_Seurat = EC_Seurat %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
DimPlot(EC_Seurat)

EC_Seurat = RenameIdents(EC_Seurat,
                         '0' = 'Tip EC',
                         '1' = 'Venous EC',
                         '2' = 'Arterial EC',
                         '3' = 'Venous EC',
                         '4' = 'Capillary EC',
                         '5' = 'Lymphatic EC',
                         '6' = 'Capillary EC',
                         '7' = 'Venous EC')
DimPlot(EC_Seurat)
Plot1 = DimPlot(EC_Seurat,
                cols = mycolor[1:6])+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.title = element_blank())


Plot2 = DotPlot(EC_Seurat,
                features = c('NID2','ESM1',#Tip_Tumor
                             'SELP','CPE',#Vein_Normal
                             'FBLN5','GJA5',
                             'CA4','CD36',#Capillary_Normal
                             'LYVE1','CCL21'#Lymphatic
                             
                ),
                cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
pdf('GSE144735_Dim_Dotplot_EndoSub_NCL.pdf',
    height = 4,width = 10)
grid.arrange(Plot1,Plot2,nrow = 1,widths = c(1.25,1))
dev.off()

pdf('Endo_Subset_Dotplot.pdf',width = 5,height = 5)
DotPlot(EC_Seurat,
        features = c('NID2','PGF','ESM1',#Tip_Tumor
                     'CA4','FABP5','PLVAP','CD320',#Capillray_Normal
                     'LYVE1','CCL21','PROX1',#Lymphatic
                     'SELP','ACKR1','VCAN',#Vein_tumor
                     'CPE'#Vein_Normal
                     
        ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()

###FeaturePlot——EndoSubgroup
marker_genes = c('NID2','ESM1',#Tip_Tumor
                 'SELP','CPE',#Vein_Normal
                 'FBLN5','GJA5',
                 'CA4','CD36',#Capillary_Normal
                 'LYVE1','CCL21'#Lymphatic
                 
)
intersect_tls = intersect(marker_genes,rownames(dge)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(EC_Seurat,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) #改变标题位置和字体大小
    )+
    xlab('')+
    ylab('')
  
})

lay = rbind(c(1,2,3,4,5),
            c(6,7,8,9,10))
legend = get_legend(
  FeaturePlot(object = EC_Seurat, features = "NID2") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('GSE144735_Featureplot_EndoSub_MarkerGenes.pdf',
    height = 8,width = 21)
ggdraw() +
  draw_plot(combined_plot, 0, 0, 0.95, 1) + 
  draw_plot(legend, 0.95, 0.25, 0.2, 0.5)  
dev.off()



EC_Seurat = RenameIdents(EC_Seurat,
                         'Tip EC' = 'Tumor EC',
                         'Capillary EC' = 'Normal EC',
                         'Arterial EC' = 'Other EC',
                         'Lymphatic EC' = 'Other EC',
                         'Venous EC' = 'Other EC')
DimPlot(EC_Seurat)
EC_Seurat@meta.data$EC_group = Idents(EC_Seurat)
pdf('Dimplot_EC_Tumor_Normal.pdf',width = 5.5,height = 4)
DimPlot(EC_Seurat,
                cols = mycolor[1:6])+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.title = element_blank())
dev.off()
Idents(EC_Seurat) = EC_Seurat@meta.data$Class
pdf('Dimplot_EC_Tumor_Normal_Position.pdf',width = 5.2,height = 4)
DimPlot(EC_Seurat,
        cols = mycolor[1:6])+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.title = element_blank())
dev.off()

DimPlot(EC_Seurat,group.by = 'EC_group')
EC_Seurat@meta.data$Class = substr(EC_Seurat@meta.data$orig.ident,7,7)
DimPlot(EC_Seurat,group.by = 'Class')
EC_NCL_data = Seurat::FetchData(EC_Seurat,
                                vars = c('NCL','EC_group'))
EC_NCL_data = filter(EC_NCL_data,EC_NCL_data$EC_group != 'Other EC')
EC_NCL_data$EC_group = factor(EC_NCL_data$EC_group,
                              levels = c('Normal EC','Tumor EC'))
table(EC_NCL_data$EC_group)
vlnplot = ggplot(EC_NCL_data, aes(x = EC_group, 
                                  y = NCL, 
                                  fill = EC_group)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c( "#317cb7",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank())+
  ylim(0,5)+
  geom_signif(comparisons=list(c(1,2)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(EC_NCL_data$NCL)*1.05) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
EC_NCL_data$expressed = ifelse(EC_NCL_data$NCL>0,'expressed','not expressed')
proportation_data = EC_NCL_data %>%
  group_by(EC_group,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$EC_group), function(grp) {
  sub_data <- subset(proportation_data, EC_group == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#317cb7','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(EC_NCL_data$NCL) * 1.4,
      ymax = max(EC_NCL_data$NCL) * 1.8
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp_in_EC.pdf',
       vlnplot,height = 5.5,width = 4.5)
###
pdf('NCL_in_Endo_Tumor_Normal.pdf',width = 8,height = 4.5)
DotPlot(EC_Seurat,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
Idents(EC_Seurat) = EC_Seurat@meta.data$EC_group

###计算NCL在M1和M2中巨噬细胞中的表达(计算M1和M2的评分)
DimPlot(dge)
Macrophage_Seurat = subset(dge,idents = 'Macrophage')
DimPlot(Macrophage_Seurat)
Macrophage_Seurat  = Macrophage_Seurat  %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
DimPlot(Macrophage_Seurat)
pdf('Dimplot_Macrophage_Subgroup.pdf',width = 5.6,height = 4)
DimPlot(Macrophage_Seurat,
        cols = mycolor[1:7])+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.title = element_blank())
dev.off()
#
pdf('GSE144735_Macrophage_MarkerGenes.pdf',
    height = 6,width = 6)
DotPlot(Macrophage_Seurat,
        features = c('IL12B','IL23A','TNF','IL6','CD86',#M1
                     'ARG1','ARG2','IL10','FCGR2A','CD163',#M2
                     'IL1B','CCL2','CCL3','CCL5','CCL7',#Inf
                     'IL1RN','IL4','IL11','IL13','TGFB1'#Anti
        ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()



M1_GeneSet = c('IL12','IL23','IL12','TNF','IL6','CD86','IL1B','MARCO',
               'NOS2','IL12','CD64','CD80','CXCR10','IL23','CXCL9',
               'CXCL10','CXCL11','CD86','IL1A','IL1B','IL6','TNF',
               'CCL5','IRF5','IRF1','CD40','IDO1','KYNU','CCR7')
M2_GeneSet = c('ARG1','ARG2','IL10','CD32','CD163','CD23','CD200R1','PDCD1LG2',
               'CD274','MARCO','CSF1R','CD206','IL1RN','IL1R2','IL4R','CCL4',
               'CCL13','CCL20','CCL17','CCL18','CCL22','CCL24','LYVE1','VEGFA',
               'VEGFB','VEGFC','VEGFD','EGF','CTSA','CTSB','CSTC','CTSD','TGFB1',
               'TGFB2','TGFB3','MMP14','MMP19','MMP9','CLEC7A','WNT7B','FASL',
               'TNFSF12','TNFSF8','CD276','VTCN1','MSR1','FN1','IRF4')
Pro_inflammatory = c('IL1B','TNF','CCL2','CCL3','CCL5','CCL7','CCL8','CCL13','CCL17','CCL22')
Anti_inflammatory = c('IL1RN','IL10','IL4','IL11','IL13','TGFB1','TNFRSF1A','TNFRSF1B',
                      'IL1R2','IL18BP')

####Macrophage的M1和M2评分
macro_cells = AddModuleScore(Macrophage_Seurat, features = list(M1_GeneSet), name = "M1_score")
macro_cells = AddModuleScore(macro_cells, features = list(M2_GeneSet), name = "M2_score")
Macrophage_Seurat@meta.data$M1_Score = macro_cells@meta.data$M1_score1
Macrophage_Seurat@meta.data$M2_Score = macro_cells@meta.data$M2_score1
###Macrophage的pro-infla和anti-infla评分
Infla_anti = AddModuleScore(Macrophage_Seurat, features = list(Pro_inflammatory), name = "Pro_inflammatory_score")
Infla_anti = AddModuleScore(Infla_anti, features = list(Anti_inflammatory), name = "Anti_inflammatory_score")
Macrophage_Seurat@meta.data$Pro_infla_score = Infla_anti@meta.data$Pro_inflammatory_score1
Macrophage_Seurat@meta.data$Anti_infla_score = Infla_anti@meta.data$Anti_inflammatory_score1

###
DimPlot(Macrophage_Seurat)
umap_df_M_ploar = Embeddings(Macrophage_Seurat, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, M1_Score, M2_Score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_M_polar = umap_df_M_ploar %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_M1 = mean(M1_Score),
    mean_M2 = mean(M2_Score),
    .groups = 'drop')
pdf('GSE144735_ScattorPlot_Macrophage_M1_M2_AddModuleScore.pdf',height = 7,
    width = 8.5)
ggplot(umap_df_M_ploar, aes(x = M1_Score, y = M2_Score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_M_polar,
    aes(x = mean_M1, y = mean_M2, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
###促炎和抗炎Macro
umap_df_infla_anti = Embeddings(Macrophage_Seurat, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, Pro_infla_score, Anti_infla_score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_infla_anti = umap_df_infla_anti %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_Pro_infla_score = mean(Pro_infla_score),
    mean_Anti_infla_score = mean(Anti_infla_score),
    .groups = 'drop')
pdf('GSE144735_ScattorPlot_Macrophage_proinflammatory_antiinflammatory_Score.pdf',height = 7,
    width = 8.5)
ggplot(umap_df_infla_anti, aes(x = Pro_infla_score, y = Anti_infla_score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_infla_anti,
    aes(x = mean_Pro_infla_score, y = mean_Anti_infla_score, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
pdf('NCL_In_7_Macrophage_Dotplot.pdf',width = 5,height = 1.5)
DotPlot(Macrophage_Seurat,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'),
        group.by = 'RNA_snn_res.0.3')+
  theme_bw()+
  theme(panel.grid = element_blank())+
  xlab('')+
  ylab('')+
  coord_flip()+
  theme(
    legend.key.size = unit(0.15, "cm"),      
    legend.text = element_text(size = 4),   
    legend.spacing.y = unit(0.15, "cm")      
  )
dev.off()
###
Macrophage_Seurat@meta.data$M_subgroup = ifelse(Macrophage_Seurat@meta.data$RNA_snn_res.0.3 == '0' |
                                                  Macrophage_Seurat@meta.data$RNA_snn_res.0.3 == '2' | 
                                                    Macrophage_Seurat@meta.data$RNA_snn_res.0.3 == '3' | 
                                                      Macrophage_Seurat@meta.data$RNA_snn_res.0.3 == '4','M2','Others')
Idents(Macrophage_Seurat) = Macrophage_Seurat@meta.data$M_subgroup
pdf('Dimplot_Macrophage_M2.pdf',width = 5.6,height = 4)
DimPlot(Macrophage_Seurat,
        cols = mycolor[1:7])+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.title = element_blank())
dev.off()
pdf('Macrophage_Seurat_GSE132465_NCL_Feature.pdf',width = 5,height = 4)
FeaturePlot(Macrophage_Seurat,
            c('NCL'),
            #cols = plasma(10),
            pt.size = 0.1,
            order = T)+
  scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()

Mac_data = Seurat::FetchData(Macrophage_Seurat,
                             vars = c('NCL','M_subgroup'))
unique(Mac_data$M_subgroup)
table(Mac_data$M_subgroup)
Mac_data$M_subgroup = factor(Mac_data$M_subgroup,
                             levels = c('M2','Others'))
DotPlot(Macrophage_Seurat,'NCL')
vlnplot = ggplot(Mac_data, aes(x = M_subgroup, y = NCL, fill = M_subgroup)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c("#6dadd1",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank(),
        text = element_text(size = 20))+
  ylim(0,7)+
  geom_signif(comparisons=list(c(1,2)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(NCL_data$NCL)*1.05,
                             max(NCL_data$NCL)*1.2,
                             max(NCL_data$NCL)*1.35) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
# 生成每个分组的饼图 grob
NCL_data$expressed = ifelse(NCL_data$NCL>0,'expressed','not expressed')
proportation_data = NCL_data %>%
  group_by(group,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$group), function(grp) {
  sub_data <- subset(proportation_data, group == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#104680','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(NCL_data$NCL) * 1.5,
      ymax = max(NCL_data$NCL) * 1.9
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_M2_exp.pdf',
       vlnplot,height = 6.5,width = 9.5)


###保存数据
saveRDS(EC_Seurat,'EC_Seurat.rds')
saveRDS(Macrophage_Seurat,'Macrophage_Seurat.rds')
saveRDS(Subgroup_Seurat,'Subgroup_Seurat.rds')
###########GSE146771===观察巨噬细胞在不同类型中NCL的表达===========###########
setwd('F:\\NC_code\\单细胞\\GSE146771')
dge = readRDS('GSE146771_dge.rds')
Idents(dge) = dge@meta.data$Global_Cluster
DimPlot(dge)
Myeloid_Seurat = subset(dge,idents = 'Myeloid cell')
DimPlot(Myeloid_Seurat)
Myeloid_Seurat = Myeloid_Seurat %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
DimPlot(Myeloid_Seurat)
#Mono Macro Mast DC
pdf('Myeloid_Subgroup_Marker_Genes.pdf',width = 5,height = 7)
DotPlot(Myeloid_Seurat,
        features = c('TPSAB1','CPA3',#Mast
                     'CD1C','BATF3','CD1E','CD33','CLEC10A','FLT3',#DC
                     'SPP1','C1QC','CD163','NLRP3','PLTP','IL1B',#Macro
                     'SPN','CD300E','CD14','FCGR3A'#Mono
                     ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
Myeloid_Seurat = RenameIdents(Myeloid_Seurat,
                              '0' = 'Mono',
                              '1' = 'Macro',
                              '2' = 'Mast',
                              '3' = 'Macro',
                              '4' = 'DC',
                              '5' = 'Mono')
DimPlot(Myeloid_Seurat)
DotPlot(Myeloid_Seurat,'NCL')
pdf('Dimplot_Myeloid_Subgroup.pdf',width = 6,height = 6)
DimPlot(Myeloid_Seurat,
        cols = mycolor[1:4])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
Myeloid_Seurat@meta.data$group = Idents(Myeloid_Seurat)
Macrophage_Seurat = subset(Myeloid_Seurat,idents = 'Macro')
DimPlot(Macrophage_Seurat)
Macrophage_Seurat = Macrophage_Seurat %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
DimPlot(Macrophage_Seurat)
DotPlot(Macrophage_Seurat,'NCL')
####Macrophage的M1和M2评分
macro_cells = AddModuleScore(Macrophage_Seurat, features = list(M1_GeneSet), name = "M1_score")
macro_cells = AddModuleScore(macro_cells, features = list(M2_GeneSet), name = "M2_score")
Macrophage_Seurat@meta.data$M1_Score = macro_cells@meta.data$M1_score1
Macrophage_Seurat@meta.data$M2_Score = macro_cells@meta.data$M2_score1
###Macrophage的pro-infla和anti-infla评分
Infla_anti = AddModuleScore(Macrophage_Seurat, features = list(Pro_inflammatory), name = "Pro_inflammatory_score")
Infla_anti = AddModuleScore(Infla_anti, features = list(Anti_inflammatory), name = "Anti_inflammatory_score")
Macrophage_Seurat@meta.data$Pro_infla_score = Infla_anti@meta.data$Pro_inflammatory_score1
Macrophage_Seurat@meta.data$Anti_infla_score = Infla_anti@meta.data$Anti_inflammatory_score1
###
umap_df_M_ploar = Embeddings(Macrophage_Seurat, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, M1_Score, M2_Score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_M_polar = umap_df_M_ploar %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_M1 = mean(M1_Score),
    mean_M2 = mean(M2_Score),
    .groups = 'drop')
pdf('GSE146771_ScattorPlot_Macrophage_M1_M2_AddModuleScore.pdf',height = 5,
    width = 6.5)
ggplot(umap_df_M_ploar, aes(x = M1_Score, y = M2_Score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_M_polar,
    aes(x = mean_M1, y = mean_M2, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
###促炎和抗炎Macro
umap_df_infla_anti = Embeddings(Macrophage_Seurat, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, Pro_infla_score, Anti_infla_score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_infla_anti = umap_df_infla_anti %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_Pro_infla_score = mean(Pro_infla_score),
    mean_Anti_infla_score = mean(Anti_infla_score),
    .groups = 'drop')
pdf('GSE146771_ScattorPlot_Macrophage_proinflammatory_antiinflammatory_Score.pdf',height = 5,
    width = 6.5)
ggplot(umap_df_infla_anti, aes(x = Pro_infla_score, y = Anti_infla_score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_infla_anti,
    aes(x = mean_Pro_infla_score, y = mean_Anti_infla_score, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
pdf('NCL_In_2_Macrophage_Dotplot.pdf',width = 5,height = 1.5)
DotPlot(Macrophage_Seurat,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank())+
  xlab('')+
  ylab('')+
  coord_flip()+
  theme(
    legend.key.size = unit(0.15, "cm"),      
    legend.text = element_text(size = 4),   
    legend.spacing.y = unit(0.15, "cm")      
  )
dev.off()
##保存数据
saveRDS(Myeloid_Seurat,'Myeloid_Seurat.rds')
saveRDS(Macrophage_Seurat,'Macrophage_Seurat.rds')

###############=========QianDataSet===================##########
setwd('F:\\NC_code\\单细胞\\QianDataSet')
dge = readRDS('Lambrecht_seurat_dge.rds')
DimPlot(dge,group.by = 'CellType')
Idents(dge) = dge@meta.data$CellType
pdf('Qian_Dotplot_NCL.pdf',
    height = 4,width = 6)
DotPlot(dge,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
###
plot1 = DimPlot(dge,
                cols = mycolor[1:9])+
  theme_bw()+
  theme(panel.grid = element_blank())
plot1
plot2 = FeaturePlot(dge,
                    c('NCL'),
                    #cols = plasma(10),
                    pt.size = 0.1,
                    order = T)+
  scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
  theme_bw()+
  theme(panel.grid = element_blank())
pdf('Qian_FeaturePlot_NCL.pdf',
    height = 4,width = 9)
grid.arrange(plot1,plot2,nrow = 1,widths = c(1.25,1))
dev.off()
###基因点图
markers = FindMarkers(dge,
                      ident.1 = 'Epithelial',
                      ident.2 = NULL,
                      min.pct = 0.25)
markers_cancer = FindMarkers(dge,
                      ident.1 = 'Cancer',
                      ident.2 = NULL,
                      min.pct = 0.25)

DimPlot(dge,group.by = 'TumorSite')
pdf('Qian_Dotplot_MarkerGenes_NCL.pdf',
    height = 5,width = 6)
DotPlot(dge,
        features = c('KRT8','EPCAM',#Epi
                     'CD14','FCGR3A',#Myeloid
                     'CD3E','CD3G',#T
                     'COL1A1','COL3A1',#Fibro
                     'PECAM1','VWF',#Endo
                     'KIT','IL1RL1',#Mast
                     'MS4A1','CD79A',#B
                     'S100B','GPM6B',#Glia
                     'CKB','CA2',
                     'NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
###FeaturePlot
marker_genes = c('KRT8','EPCAM',#Epi
                 'CD14','FCGR3A',#Myeloid
                 'CD3E','CD3G',#T
                 'COL1A1','COL3A1',#Fibro
                 'PECAM1','VWF',#Endo
                 'KIT','IL1RL1',#Mast
                 'MS4A1','CD79A',#B
                 'S100B','GPM6B',#Glia
                 'CKB','CA2'
                 )
intersect_tls = intersect(marker_genes,rownames(dge)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(dge,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) 
    )+
    xlab('')+
    ylab('')
  
})

lay = rbind(c(1,2,3,4,5,6,7,8,9),
            c(10,11,12,13,14,15,16,17,18))
legend = get_legend(
  FeaturePlot(object = dge, features = "KRT8") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('Qian_Featureplot_MarkerGenes.pdf',
    height = 8,width = 36.5)
ggdraw() +
  draw_plot(combined_plot, 0, 0, 0.95, 1) + 
  draw_plot(legend, 0.95, 0.25, 0.2, 0.5)  
dev.off()
###小提琴图和pie图绘制NCL在不同细胞的表达和比例
Subgroup_Seurat = subset(dge,idents = c('Cancer','EC','Fibroblast','Myeloid','Epithelial'))
#Subgroup_Seurat = Subgroup_Seurat %>% NormalizeData() %>% 
  #FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  #FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  #RunUMAP(dims = 1:20)

pdf('SubGroup_Dimplot.pdf',width = 6,height = 5.5)
DimPlot(Subgroup_Seurat,
        cols = mycolor)+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()

##
markers_sub_1 = FindAllMarkers(Subgroup_Seurat,
                             min.pct = 0.25)
top10 = markers_sub_1 %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
write.csv(markers_sub_1,'marker.csv')
DotPlot(Subgroup_Seurat,
        features = c('CDH1','EPCAM',#
                      'S100A9','CD163','CD68',#Macro
                     'CD24','GPX2',#Stem cell
                     'ADH1B','OGN',#Fibro1
                     'PECAM1','VWF',#EC
                     'INHBA','COL10A1',#Fibro2
                     'MMP7','',#	Mesenchymal cell(epi-1)	
                     'RGS5','MYH11',#peri
                     'REG4','S100P',#Goblet cell
                     'CXCL14','ADAMDEC1',#Fibro
                     'CA2','CA1',#Epi
                     'AIF1','C1QC',#Paneth cell
                     'CEACAM5','DPEP1',#Epi
                     'ADAMTS16',#Stromal
                     'DPT','MGP',#progenitor cell
                     'IRF4','FLT3','CD1C'#DC
                     ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()

Subgroup_Seurat = RenameIdents(Subgroup_Seurat,
                               '0' = 'Macrophage',
                               '1' = 'Progenitor cells',
                               '2' = 'Fibroblast',
                               '3' = 'Endothelial cells',
                               '4' = 'Fibroblast',
                               '5' = 'Epithelial cells',
                               '6' = 'pericyte',
                               '7' = 'Epithelial cells',
                               '8' = 'Epithelial cells',
                               '9' = 'Fibroblast',
                               '10' = 'Epithelial cells',
                               '11' = 'Paneth cell',
                               '12' = 'Epithelial cells',
                               '13' = 'Progenitor cells',
                               '14' = 'Progenitor cells',
                               '15' = 'DC')
DimPlot(Subgroup_Seurat)
FeaturePlot(Subgroup_Seurat,'NCL')
###SingleR注释
hpca.se = HumanPrimaryCellAtlasData()
SingleR_inputdata = GetAssayData(Subgroup_Seurat, slot="data")
singleR_results = SingleR(test = SingleR_inputdata,
                          ref = hpca.se, 
                          labels = hpca.se$label.main) 
Subgroup_Seurat@meta.data$SingleR_labels = singleR_results$labels
DimPlot(Subgroup_Seurat,group.by = 'SingleR_labels')
DimPlot(Subgroup_Seurat)
DimPlot(Subgroup_Seurat,group.by = 'CellType')
###人工注释
pdf('Dotplot_Subgroup.pdf',width = 6,height = 6)
DotPlot(Subgroup_Seurat,
        features = c('KRT8','EPCAM',#epi
                     'PECAM1','VWF',#EC
                     'COL1A1','DCN',#Fibro
                     'LYZ','CD68'#Myeloid
        ),
        cols = c('#B3B3B3','#E41A1C'),
        group.by = 'RNA_snn_res.0.1')+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
Subgroup_Seurat = RenameIdents(Subgroup_Seurat,
                               '0' = 'Myeloid cells',
                               '1' = 'Epithelial cells',
                               '2' = 'Fibroblast',
                               '3' = 'Endothelial cells',
                               '4' = 'Fibroblast',
                               '5' = 'Epithelial cells',
                               '6' = 'Fibroblast',
                               '7' = 'Epithelial cells',
                               '8' = 'Epithelial cells',
                               '9' = 'Fibroblast',
                               '10' = 'Epithelial cells',
                               '11' = 'Myeloid cells',
                               '12' = 'Epithelial cells',
                               '13' = 'Fibroblast',
                               '14' = 'Fibroblast',
                               '15' = 'Myeloid cells')
pdf('SubGroup_Dimplot_Annotation.pdf',width = 7,height = 5.5)
DimPlot(Subgroup_Seurat,
        cols = mycolor[1:4])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
###计算并绘制NCL在不同细胞类型中表达的小提琴图和饼图
Subgroup_Seurat@meta.data$final_Seurat = Idents(Subgroup_Seurat)
NCL_data = Seurat::FetchData(Subgroup_Seurat,
                             vars = c('NCL','CellType'))
unique(NCL_data$CellType)
NCL_data$CellType = factor(NCL_data$CellType,
                               levels = c('Cancer','Epithelial',
                                          'EC','Fibroblast','Myeloid'))
vlnplot = ggplot(NCL_data, aes(x = CellType, y = NCL, fill = CellType)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c("#104680", "#317cb7",'#408FBF','#89BED9', "#BFDAE9"))+
  theme(legend.position  = 'None',
        panel.grid = element_blank(),
        text = element_text(size = 20))+
  ylim(0,9)+
  geom_signif(comparisons=list(c(1,4),
                               c(2,4),
                               c(4,3),
                               c(5,4)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(NCL_data$NCL)*1.05,
                             max(NCL_data$NCL)*1.2,
                             max(NCL_data$NCL)*1.35,
                             max(NCL_data$NCL)*1.5) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
# 生成每个分组的饼图 grob
NCL_data$expressed = ifelse(NCL_data$NCL>0,'expressed','not expressed')
proportation_data = NCL_data %>%
  group_by(CellType,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$CellType), function(grp) {
  sub_data <- subset(proportation_data, CellType == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#104680','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(NCL_data$NCL) * 1.75,
      ymax = max(NCL_data$NCL) * 2.15
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp.pdf',
       vlnplot,height = 6.5,width = 9.5)
###计算NCL在正常和肿瘤EC中的表达差异
EC_Seurat = subset(Subgroup_Seurat,idents = 'EC')
EC_Seurat = EC_Seurat %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
DimPlot(EC_Seurat)
###
Markers_EC_3 = FindMarkers(EC_Seurat,
                           '3',NULL,
                           only.pos = T,
                           min.pct = 0.25)
EC_Seurat = RenameIdents(EC_Seurat,
                         '0' = 'Tip EC',
                         '1' = 'Venous EC',
                         '2' = 'Venous EC',
                         '3' = 'Unknown',
                         '4' = 'Arterial EC',
                         '5' = 'Lymphatic EC',
                         '6' = 'Capillary EC',
                         '7' = 'Capillary EC',
                         '8' = 'Tip EC',
                         '9' = 'Mural EC')
EC_Seurat@meta.data$Endo_Subgroup = Idents(EC_Seurat)
EC_Seurat@meta.data$Endo_Subgroup = factor(EC_Seurat@meta.data$Endo_Subgroup,
                                           levels = c('Tip EC','Capillary EC',
                                                      'Arterial EC','Lymphatic EC',
                                                      'Venous EC','Mural EC','Unknown'))
Idents(EC_Seurat) = EC_Seurat@meta.data$Endo_Subgroup
Plot1 = DimPlot(EC_Seurat,
                cols = mycolor[1:7])+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(legend.title = element_blank())


Plot2 = DotPlot(EC_Seurat,
                features = c('NID2','ESM1',#Tip_Tumor
                             'CA4','CD36',#Capillary_Normal
                             'FBLN5','GJA5',
                             'LYVE1','CCL21',#Lymphatic
                             'SELP','CPE',#Vein_Normal
                             'RGS5','ACTA2'
                ),
                cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()

pdf('Qian_Dimplot_Dotplot_Endothelial.pdf',
    height = 4,width = 9)
grid.arrange(Plot1,Plot2,nrow = 1,widths = c(1.25,1))
dev.off()


###FeaturePlot_EC_Subgroup
marker_genes = c('NID2','ESM1',#Tip_Tumor
                 'CA4','CD36',#Capillary_Normal
                 'FBLN5','GJA5',
                 'LYVE1','CCL21',#Lymphatic
                 'SELP','CPE',#Vein_Normal
                 'RGS5','ACTA2'
)
intersect_tls = intersect(marker_genes,rownames(EC_Seurat)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(EC_Seurat,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) 
    )+
    xlab('')+
    ylab('')
  
})

lay = rbind(c(1,2,3,4,5,6),
            c(7,8,9,10,11,12))
legend = get_legend(
  FeaturePlot(object = dge, features = "NID2") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('Qian_Featureplot_ECsubgroup_markergenes.pdf',
    height = 8,width = 24.5)
ggdraw() +
  draw_plot(combined_plot, 0, 0, 0.95, 1) + 
  draw_plot(legend, 0.95, 0.25, 0.2, 0.5)  
dev.off()

EC_Seurat = RenameIdents(EC_Seurat,
                         'Tip EC' = 'Tumor_EC',
                         'Capillary EC' = 'Normal_EC',
                         'Venous EC' = 'Other EC',
                         'Arterial EC' = 'Other EC',
                         'Lymphatic EC' = 'Other EC',
                         'Mural EC' = 'Other EC',
                         'Unknown' = 'Other EC')
DimPlot(EC_Seurat)
EC_Seurat@meta.data$EC_group = Idents(EC_Seurat)
pdf('Endo_Dimplot.pdf',width = 7.5,height = 5)
DimPlot(EC_Seurat,
        cols = mycolor[1:3],
        group.by = 'EC_group')+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
pdf('Endo_Dimplot_TumorSite.pdf',width = 7.5,height = 5)
DimPlot(EC_Seurat,
        cols = mycolor[1:3],
        group.by = 'TumorSite')+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
EC_NCL_data = Seurat::FetchData(EC_Seurat,
                                vars = c('NCL','EC_group'))
EC_NCL_data = filter(EC_NCL_data,EC_NCL_data$EC_group != 'Other EC')
EC_NCL_data$EC_group = factor(EC_NCL_data$EC_group,
                              levels = c('Normal_EC','Tumor_EC'))
table(EC_NCL_data$EC_group)
vlnplot = ggplot(EC_NCL_data, aes(x = EC_group, 
                                  y = NCL, 
                                  fill = EC_group)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c( "#317cb7",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank(),
        text = element_text(size = 20))+
  ylim(0,5)+
  geom_signif(comparisons=list(c(1,2)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(EC_NCL_data$NCL)*1.05) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
EC_NCL_data$expressed = ifelse(EC_NCL_data$NCL>0,'expressed','not expressed')
proportation_data = EC_NCL_data %>%
  group_by(EC_group,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$EC_group), function(grp) {
  sub_data <- subset(proportation_data, EC_group == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#317cb7','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(EC_NCL_data$NCL) * 1.2,
      ymax = max(EC_NCL_data$NCL) * 1.6
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp_in_EC.pdf',
       vlnplot,height = 5.5,width = 4.5)
###计算NCL在M1和M2中巨噬细胞中的表达(计算M1和M2的评分)
DimPlot(dge)
Myeloid_Seurat = subset(dge,idents = 'Myeloid')
DimPlot(Myeloid_Seurat)
Myeloid_Seurat  = Myeloid_Seurat  %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
DimPlot(Myeloid_Seurat)

#Mono Macro Mast DC
Myeloid_Seurat@meta.data$Myeloid_subclusters = Idents(Myeloid_Seurat) 
Myeloid_Seurat@meta.data$Myeloid_subclusters = factor(Myeloid_Seurat@meta.data$Myeloid_subclusters,
                                                      levels = c('DC','Macro','Others'))
Idents(Myeloid_Seurat) = Myeloid_Seurat@meta.data$Myeloid_subclusters
pdf('Myeloid_Subgroup_Marker_Genes.pdf',width = 4,height = 6)
DotPlot(Myeloid_Seurat,
        features = c('CD1C','CD1E','CD33','CLEC10A','FCER1A',#DC
                     'SPP1','C1QC','CD163','CSF1R','CD68'#Macro
                     
        ),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))+
  xlab('')+
  ylab('')+
  coord_flip()
dev.off()
Myeloid_Seurat = RenameIdents(Myeloid_Seurat,
                              '0' = 'Macro',
                              '1' = 'DC',
                              '2' = 'Macro',
                              '3' = 'Others',
                              '4' = 'Macro',
                              '5' = 'Macro',
                              '6' = 'Others',
                              '7' = 'Others',
                              '8' = 'Others',
                              '9' = 'Others')
DimPlot(Myeloid_Seurat)
DotPlot(Myeloid_Seurat,'NCL')
pdf('Dimplot_Myeloid_Subgroup.pdf',width = 6.5,height = 5)
DimPlot(Myeloid_Seurat,
        cols = mycolor[1:3])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()

###FeaturePlot_EC_Subgroup
marker_genes = c('CD1C','CD1E','CD33','CLEC10A','FCER1A',#DC
                 'SPP1','C1QC','CD163','CSF1R','CD68'#Macro
                 
)
intersect_tls = intersect(marker_genes,rownames(Myeloid_Seurat)) 
plot_list = lapply(intersect_tls,function(x){
  plot_list = FeaturePlot(Myeloid_Seurat,
                          features = x,
                          pt.size = 0.1,
                          order = T)+
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme_bw()+
    theme( 
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      axis.ticks = element_blank(),
      axis.text = element_blank(), 
      legend.position = "none", 
      plot.title = element_text(hjust = 0.5,size=15) 
    )+
    xlab('')+
    ylab('')
  
})

lay = rbind(c(1,2,3,4,5),
            c(6,7,8,9,10))
legend = get_legend(
  FeaturePlot(object = Myeloid_Seurat, features = "CD1C") + 
    scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
    theme(legend.box.margin = margin(0, 0, 0, 12)) 
)

combined_plot = grid.arrange(grobs = plot_list, layout_matrix = lay)

pdf('Qian_Featureplot_Myeloid_subgroup_markergenes.pdf',
    height = 8,width = 20.5)
ggdraw() +
  draw_plot(combined_plot, 0, 0, 0.95, 1) + 
  draw_plot(legend, 0.95, 0.25, 0.2, 0.5)  
dev.off()



###提取Macrophage
Macrophage_Seurat = subset(Myeloid_Seurat,idents = 'Macro')
DimPlot(Macrophage_Seurat)
Macrophage_Seurat = Macrophage_Seurat %>% NormalizeData() %>% 
  FindVariableFeatures() %>% ScaleData() %>% RunPCA() %>% 
  FindNeighbors(dims = 1:20) %>% FindClusters(resolution = 0.3) %>% 
  RunUMAP(dims = 1:20)
DimPlot(Macrophage_Seurat)
DotPlot(Macrophage_Seurat,'NCL')


Plot1 = DimPlot(Macrophage_Seurat,
        cols = mycolor[1:5])+
  theme_bw()+
  theme(panel.grid = element_blank())

Plot2 = FeaturePlot(Macrophage_Seurat,'NCL')+
  scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = "RdBu")))+
  theme_bw()+
  theme(panel.grid = element_blank())
pdf('Macrophage_Dimplot_Dotplot_Subgroup.pdf',width = 9,height = 4)
grid.arrange(Plot1,Plot2,nrow = 1 ,widths = c(1.25,1))
dev.off()








setwd('F:\\NC_code\\单细胞\\QianDataSet')
Macrophage_Seurat = readRDS('Macrophage_Seurat.rds')
DimPlot(Macrophage_Seurat)
nrow(Macrophage_Seurat@meta.data)
unique(Macrophage_Seurat@meta.data$RNA_snn_res.0.3)
Macrophage_Seurat@meta.data$M_Subgroup = ifelse(Macrophage_Seurat@meta.data$RNA_snn_res.0.3 == '4','others','M2-like')
Idents(Macrophage_Seurat) = Macrophage_Seurat@meta.data$M_Subgroup
DotPlot(Macrophage_Seurat,'NCL')
FeaturePlot(Macrophage_Seurat,'NCL')
table(Macrophage_Seurat@meta.data$M_Subgroup)

#Macrophage_Seurat = subset(Subgroup_Seurat,idents = 'Macrophage')

M1_GeneSet = c('IL12','IL23','IL12','TNF','IL6','CD86','IL1B','MARCO',
               'NOS2','IL12','CD64','CD80','CXCR10','IL23','CXCL9',
               'CXCL10','CXCL11','CD86','IL1A','IL1B','IL6','TNF',
               'CCL5','IRF5','IRF1','CD40','IDO1','KYNU','CCR7')
M2_GeneSet = c('ARG1','ARG2','IL10','CD32','CD163','CD23','CD200R1','PDCD1LG2',
               'CD274','MARCO','CSF1R','CD206','IL1RN','IL1R2','IL4R','CCL4',
               'CCL13','CCL20','CCL17','CCL18','CCL22','CCL24','LYVE1','VEGFA',
               'VEGFB','VEGFC','VEGFD','EGF','CTSA','CTSB','CSTC','CTSD','TGFB1',
               'TGFB2','TGFB3','MMP14','MMP19','MMP9','CLEC7A','WNT7B','FASL',
               'TNFSF12','TNFSF8','CD276','VTCN1','MSR1','FN1','IRF4')
Pro_inflammatory = c('IL1B','TNF','CCL2','CCL3','CCL5','CCL7','CCL8','CCL13','CCL17','CCL22')
Anti_inflammatory = c('IL1RN','IL10','IL4','IL11','IL13','TGFB1','TNFRSF1A','TNFRSF1B',
                      'IL1R2','IL18BP')

####Macrophage的M1和M2评分
macro_cells = AddModuleScore(Macrophage_Seurat, features = list(M1_GeneSet), name = "M1_score")
macro_cells = AddModuleScore(macro_cells, features = list(M2_GeneSet), name = "M2_score")
Macrophage_Seurat@meta.data$M1_Score = macro_cells@meta.data$M1_score1
Macrophage_Seurat@meta.data$M2_Score = macro_cells@meta.data$M2_score1
###Macrophage的pro-infla和anti-infla评分
Infla_anti = AddModuleScore(Macrophage_Seurat, features = list(Pro_inflammatory), name = "Pro_inflammatory_score")
Infla_anti = AddModuleScore(Infla_anti, features = list(Anti_inflammatory), name = "Anti_inflammatory_score")
Macrophage_Seurat@meta.data$Pro_infla_score = Infla_anti@meta.data$Pro_inflammatory_score1
Macrophage_Seurat@meta.data$Anti_infla_score = Infla_anti@meta.data$Anti_inflammatory_score1
###
umap_df_M_ploar = Embeddings(Macrophage_Seurat, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, M1_Score, M2_Score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_M_polar = umap_df_M_ploar %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_M1 = mean(M1_Score),
    mean_M2 = mean(M2_Score),
    .groups = 'drop')
pdf('Qian_ScattorPlot_Macrophage_M1_M2_AddModuleScore.pdf',height = 8,
    width = 9.5)
ggplot(umap_df_M_ploar, aes(x = M1_Score, y = M2_Score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_M_polar,
    aes(x = mean_M1, y = mean_M2, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
###促炎和抗炎Macro
umap_df_infla_anti = Embeddings(Macrophage_Seurat, "umap") %>% 
  as.data.frame() %>%
  tibble::rownames_to_column("cell") %>%
  left_join(
    Macrophage_Seurat@meta.data %>% 
      tibble::rownames_to_column("cell") %>%
      select(cell, Pro_infla_score, Anti_infla_score, RNA_snn_res.0.3),  
    by = "cell")
cluster_means_infla_anti = umap_df_infla_anti %>%
  group_by(RNA_snn_res.0.3) %>%
  summarise(
    mean_Pro_infla_score = mean(Pro_infla_score),
    mean_Anti_infla_score = mean(Anti_infla_score),
    .groups = 'drop')
pdf('Qian_ScattorPlot_Macrophage_proinflammatory_antiinflammatory_Score.pdf',height = 8,
    width = 9.5)
ggplot(umap_df_infla_anti, aes(x = Pro_infla_score, y = Anti_infla_score)) +
  geom_point(
    aes(color = RNA_snn_res.0.3), 
    alpha = 0.6,
    size = 1.8,
    shape = 16)+
  geom_point(
    data = cluster_means_infla_anti,
    aes(x = mean_Pro_infla_score, y = mean_Anti_infla_score, fill = factor(RNA_snn_res.0.3)),
    shape = 24,  
    size = 5,
    stroke = 0.5,
    color = "black")+
  scale_fill_brewer(palette = "Set1", name = "Cluster")+
  theme_bw() +
  theme( panel.grid = element_blank(),
         plot.title = element_text(hjust = 0.5, face = "bold"))+
  geom_vline(xintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7) +
  geom_hline(yintercept = 0, linetype = "dotted", color = "black", linewidth = 0.7)
dev.off()
pdf('NCL_In_5_Macrophage_Dotplot.pdf',width = 5,height = 1.5)
DotPlot(Macrophage_Seurat,
        features = c('NCL'),
        cols = c('#B3B3B3','#E41A1C'))+
  theme_bw()+
  theme(panel.grid = element_blank())+
  xlab('')+
  ylab('')+
  coord_flip()+
  theme(
    legend.key.size = unit(0.15, "cm"),      
    legend.text = element_text(size = 4),   
    legend.spacing.y = unit(0.15, "cm")      
  )
dev.off()
##保存数据
saveRDS(EC_Seurat,'EC_Seurat.rds')
saveRDS(Macrophage_Seurat,'Macrophage_Seurat.rds')
saveRDS(Myeloid_Seurat,'Myeloid_Seurat.rds')
saveRDS(Subgroup_Seurat,'Subgroup_Seurat.rds')
###NCL在肿瘤细胞和正常细胞中的表达差异
Epi_Normal_Seurat = subset(dge,idents = c('Cancer','Epithelial'))
DimPlot(Epi_Normal_Seurat)
Cancer_Normal_Epi_NCL_data = Seurat::FetchData(Epi_Normal_Seurat,
                                               c('NCL','CellType'))
table(Cancer_Normal_Epi_NCL_data$CellType)
Cancer_Normal_Epi_NCL_data$CellType = factor(Cancer_Normal_Epi_NCL_data$CellType,
                                             levels = c('Epithelial','Cancer'))
vlnplot = ggplot(Cancer_Normal_Epi_NCL_data, aes(x = CellType, 
                                  y = NCL, 
                                  fill = CellType)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c( "#317cb7",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank())+
  ylim(0,7)+
  geom_signif(comparisons=list(c(1,2)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(Cancer_Normal_Epi_NCL_data$NCL)*1.05) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
Cancer_Normal_Epi_NCL_data$expressed = ifelse(Cancer_Normal_Epi_NCL_data$NCL>0,'expressed','not expressed')
proportation_data = Cancer_Normal_Epi_NCL_data %>%
  group_by(CellType,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$CellType), function(grp) {
  sub_data <- subset(proportation_data, CellType == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#317cb7','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(Cancer_Normal_Epi_NCL_data$NCL) * 1.2,
      ymax = max(Cancer_Normal_Epi_NCL_data$NCL) * 1.6
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp_in_Cancer.pdf',
       vlnplot,height = 5.5,width = 4.5)
###
nrow(Macrophage_Seurat@meta.data)
length(which(Macrophage_Seurat@meta.data$RNA_snn_res.0.3 == '1'))
###############==============InferCNV===GSE144735=============##########
###构建数据
setwd('F:\\NC_code\\单细胞\\GSE144735')
Epi_Normal_Seurat = readRDS('Subgroup_Seurat.rds')
DimPlot(Epi_Normal_Seurat)
Epi_Normal_Seurat = subset(Epi_Normal_Seurat,idents = 'Epithelial_cells')
saveRDS(Epi_Normal_Seurat,'Epi_Normal_Seurat.rds')
epiMat = as.data.frame(GetAssayData(Epi_Normal_Seurat,
                                    slot='counts',
                                    assay='RNA'))
Endothelial_Seurat = readRDS('EC_Seurat.rds')
EC_Mat=as.data.frame(GetAssayData(Endothelial_Seurat,
                                  slot='counts',
                                  assay='RNA'))
EC_Mat = EC_Mat[,sample(1:ncol(EC_Mat),800)]
dat = cbind(epiMat,EC_Mat)
groupinfo = data.frame(v1=colnames(dat),
                      v2=c(rep('epi',ncol(epiMat)),
                          rep('spike-EC_cell',300),
                          rep('ref-EC_cell',500)))
geneInfor = annoGene(rownames(dat),"SYMBOL",'human')
colnames(geneInfor)
geneInfor = geneInfor[with(geneInfor, order(chr, start)),c(1,4:6)]
geneInfor = geneInfor[!duplicated(geneInfor[,1]),]
length(unique(geneInfor[,1]))
dat = dat[rownames(dat) %in% geneInfor[,1],]
dat = dat[match(geneInfor[,1],rownames(dat)),] 
expFile = 'expFile.txt'
write.table(dat,file = expFile,sep = '\t',quote = F)
groupFiles = 'groupFiles.txt'
write.table(groupinfo,file = groupFiles,sep = '\t',quote = F,col.names = F,row.names = F)
geneFile = 'geneFile.txt'
write.table(geneInfor,file = geneFile,sep = '\t',quote = F,col.names = F,row.names = F)
##运行inferCNV
rm(list=ls())
options(stringsAsFactors = F)
expFile='expFile.txt' 
groupFiles='groupFiles.txt'  
geneFile='geneFile.txt'
infercnv_obj = CreateInfercnvObject(raw_counts_matrix = expFile,
                                    annotations_file = groupFiles,
                                    delim="\t",
                                    gene_order_file = geneFile,
                                    ref_group_names = c("ref-EC_cell"))

infercnv_obj2 = infercnv::run(infercnv_obj,
                              cutoff = 0.1, 
                              out_dir= "infercnv_output",  
                              cluster_by_groups=F,   
                              hclust_method="ward.D2", plot_steps=F,
                              HMM = F,
                              denoise = T,
                              write_expr_matrix = T)
###
setwd('F:\\NC_code\\单细胞\\GSE144735\\infercnv_output\\infercnv_output')
getwd()
infercnv_obj = readRDS('run.final.infercnv_obj')
expr = infercnv_obj@expr.data
normal_loc = infercnv_obj@reference_grouped_cell_indices
normal_loc = normal_loc$`ref-EC_cell`
test_loc = infercnv_obj@observation_grouped_cell_indices
test_loc = c(test_loc$epi,test_loc$`spike-EC_cell`)
anno.df = data.frame(
  CB = c(colnames(expr)[normal_loc],colnames(expr)[test_loc]),
  class = c(rep("normal",length(normal_loc)),rep("test",length(test_loc)))
)
table(anno.df$class)
gn = rownames(expr)
geneFile = read.table("F:\\NC_code\\单细胞\\GSE144735\\geneFile.txt",header = F,sep = "\t",stringsAsFactors = F)
rownames(geneFile) = geneFile$V1
sub_geneFile =  geneFile[intersect(gn,geneFile$V1),]
expr=expr[intersect(gn,geneFile$V1),]
set.seed(19991109)
kmeans.result = kmeans(t(expr), 7)
##
table(kmeans.result$cluster)
groupFiles='F:\\NC_code\\单细胞\\GSE144735\\groupFiles.txt'   
groupFiles=read.table(groupFiles)
infercnv.labels=as.data.frame(kmeans.result$cluster)
infercnv.labels$V1=rownames(infercnv.labels)
groupFiles=merge(groupFiles,infercnv.labels,by='V1')
table(groupFiles[,2:3])
##
kmeans_df = data.frame(kmeans_class = kmeans.result$cluster)
kmeans_df$CB = rownames(kmeans_df)
kmeans_df = kmeans_df %>% inner_join(anno.df,by="CB") 
kmeans_df_s = arrange(kmeans_df,kmeans_class) 
rownames(kmeans_df_s) = kmeans_df_s$CB
kmeans_df_s$CB = NULL
kmeans_df_s$kmeans_class = as.factor(kmeans_df_s$kmeans_class)
top_anno = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = "NA",col="NA"),
                                              labels = 1:22,
                                              labels_gp = gpar(cex = 1.5)))
color_v = RColorBrewer::brewer.pal(8, "Dark2")[1:7]
names(color_v) = as.character(1:7)
left_anno = rowAnnotation(df = kmeans_df_s,
                          col=list(class=c("test"="#66C2A5","normal" = "#FC8D62"),
                                   ans_class=color_v))
pdf("CNV_score_heatmap.pdf",width = 15,height = 10)
ht = Heatmap(t(expr)[rownames(kmeans_df_s),],
             col = colorRamp2(c(0.4,1,1.6), c("#377EB8","#F0F0F0","#E41A1C")), 
             cluster_rows = F,cluster_columns = F,show_column_names = F,show_row_names = F,
             column_split = factor(sub_geneFile$V2, paste("chr",1:22,sep = "")),
             column_gap = unit(2, "mm"),
             
             heatmap_legend_param = list(title = "Modified expression",direction = "vertical",title_position = "leftcenter-rot",at=c(0.4,1,1.6),legend_height = unit(3, "cm")),
             
             top_annotation = top_anno,left_annotation = left_anno, 
             row_title = NULL,column_title = NULL)
draw(ht, heatmap_legend_side = "right")
dev.off()
###
#getwd()
#infercnv_obj = readRDS('run.final.infercnv_obj')
#expr = infercnv_obj@expr.data
#data_cnv = as.data.frame(expr)
#colnames(Epi_Normal_Seurat)
#expr2 = expr-1
#expr2 = expr2^2
#CNV_score = as.data.frame(colMeans(expr2))
#CNV_score$CB = rownames(CNV_score)
#kmeans.result = kmeans(t(expr),7)
#table(kmeans.result$cluster)
groupFiles='F:\\NC_code\\单细胞\\GSE144735\\groupFiles.txt'   
groupFiles=read.table(groupFiles)
infercnv.labels=as.data.frame(kmeans.result$cluster)
infercnv.labels$V1=rownames(infercnv.labels)
groupFiles=merge(groupFiles,infercnv.labels,by='V1')
#table(groupFiles[,2:3])
#dge = readRDS('F:\\NC_code\\单细胞\\GSE144735\\GSE144735_dge.rds')
#DimPlot(dge)
#Epi_Normal_Seurat = subset(dge,idents = 'Epithelial_cells')
meta = Epi_Normal_Seurat@meta.data %>%
  rownames_to_column(var='V1') %>%
  inner_join(groupFiles, by='V1') %>%
  column_to_rownames(var='V1')
unique(meta$`kmeans.result$cluster`)
unique(meta$Group)
meta$Group = ifelse(meta$`kmeans.result$cluster` == 4,'Normal','Tumor')
Epi_Normal_Seurat@meta.data = meta
Idents(Epi_Normal_Seurat) = Epi_Normal_Seurat@meta.data$Group
DimPlot(Epi_Normal_Seurat)
table(meta$Group)
#VlnPlot(Epi_Normal_Seurat,'NCL',group.by = 'Group')
#DotPlot(Epi_Normal_Seurat,'NCL',group.by = 'Group')
#meta = meta[,-c(16,17,18,19)]
colnames(meta)[16] = 'Kmeans_clusters'
Epi_Normal_Seurat@meta.data = meta
Idents(Epi_Normal_Seurat) = Epi_Normal_Seurat@meta.data$Group
pdf('Dimplot_CNV_Tumor_Normal_Epi.pdf',width = 5,height = 4)
DimPlot(Epi_Normal_Seurat,
        cols = mycolor[1:7])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
#####计算CNV评分
getwd()
obs = read.table("infercnv.observations.txt", header=T)
ref = read.table("infercnv.references.txt", header=T)
# 合并参考与观测细胞
expr = cbind(obs, ref)
expr.scale = scale(t(expr))
# 归一化 CNV 评分计算
tmp1 = sweep(expr.scale, 2, apply(expr.scale, 2, min),'-')
tmp2 = apply(expr.scale, 2, max) - apply(expr.scale,2,min)
expr_1 = t(2*sweep(tmp1, 2, tmp2, "/")-1)
cnv_score = as.data.frame(colSums(expr_1 * expr_1))
colnames(cnv_score) = "cnv_score"
cnv_score = rownames_to_column(cnv_score, var='cell')
cnv_score$cell = gsub("\\.", "-", cnv_score$cell)

meta = Epi_Normal_Seurat@meta.data %>%
  rownames_to_column(var='cell') %>%
  inner_join(cnv_score, by='cell') %>%
  column_to_rownames(var='cell')
###CNV评分画图
table(meta$`kmeans.result$cluster`)
#colnames(meta)[18] = 'Group'
pdf('CNV_Score.pdf',height = 6,width = 3)
ggboxplot(meta, "Kmeans_clusters", "cnv_score", fill = "Kmeans_clusters") + 
  scale_y_continuous(limits = c(0, 3000)) +  
  xlab("kmeans_Cluster") +  
  ylab("CNV Score") +
  theme(panel.border = element_rect(colour = "black", fill = NA, size = 0.5)) +
  theme(legend.position = "none")+
  scale_fill_manual(values = mycolor[1:7])
dev.off()
##保存数据
saveRDS(Epi_Normal_Seurat,'Epi_Normal_Seurat.rds')
##########===========InferCNV====GSE132465=========######
setwd('F:\\NC_code\\单细胞\\GSE132465')
metadata = fread('GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz',data.table = F,header = T)
dge = readRDS('GSE132465_dge.rds')
metadata = subset(metadata,metadata$Index %in% rownames(dge@meta.data))
identical(metadata$Index,rownames(dge@meta.data))
dge@meta.data$Patient = metadata$Patient
dge@meta.data$Class = metadata$Class
dge@meta.data$Cell_type = metadata$Cell_type
dge@meta.data$Cell_subtype = metadata$Cell_subtype
Idents(dge) = dge@meta.data$Cell_type
DimPlot(dge)
Epi_Normal_Seurat = subset(dge,idents = 'Epithelial cells')
saveRDS(Epi_Normal_Seurat,'Epi_Normal_Seurat.rds')
#Epi_Normal_Seurat = readRDS('Epi_Normal_Seurat.rds')
DimPlot(Epi_Normal_Seurat)
epiMat = as.data.frame(GetAssayData(Epi_Normal_Seurat,
                                    slot='counts',
                                    assay='RNA'))
Endothelial_Seurat = readRDS('EC_Seurat.rds')
EC_Mat=as.data.frame(GetAssayData(Endothelial_Seurat,
                                  slot='counts',
                                  assay='RNA'))
EC_Mat = EC_Mat[,sample(1:ncol(EC_Mat),800)]
dat = cbind(epiMat,EC_Mat)
groupinfo = data.frame(v1=colnames(dat),
                       v2=c(rep('epi',ncol(epiMat)),
                            rep('spike-EC_cell',300),
                            rep('ref-EC_cell',500)))
geneInfor = annoGene(rownames(dat),"SYMBOL",'human')
colnames(geneInfor)
geneInfor = geneInfor[with(geneInfor, order(chr, start)),c(1,4:6)]
geneInfor = geneInfor[!duplicated(geneInfor[,1]),]
length(unique(geneInfor[,1]))
dat = dat[rownames(dat) %in% geneInfor[,1],]
dat = dat[match(geneInfor[,1],rownames(dat)),] 
expFile = 'expFile.txt'
write.table(dat,file = expFile,sep = '\t',quote = F)
groupFiles = 'groupFiles.txt'
write.table(groupinfo,file = groupFiles,sep = '\t',quote = F,col.names = F,row.names = F)
geneFile = 'geneFile.txt'
write.table(geneInfor,file = geneFile,sep = '\t',quote = F,col.names = F,row.names = F)
##运行inferCNV
rm(list=ls())
options(stringsAsFactors = F)
expFile='expFile.txt' 
groupFiles='groupFiles.txt'  
geneFile='geneFile.txt'
infercnv_obj = CreateInfercnvObject(raw_counts_matrix = expFile,
                                    annotations_file = groupFiles,
                                    delim="\t",
                                    gene_order_file = geneFile,
                                    ref_group_names = c("ref-EC_cell"))

infercnv_obj2 = infercnv::run(infercnv_obj,
                              cutoff = 0.1, 
                              out_dir= "infercnv_output",  
                              cluster_by_groups=F,   
                              hclust_method="ward.D2", plot_steps=F,
                              HMM = F,
                              denoise = T,
                              write_expr_matrix = T)
###
infercnv_obj = readRDS('.//infercnv_output//run.final.infercnv_obj')
expr = infercnv_obj@expr.data
normal_loc = infercnv_obj@reference_grouped_cell_indices
normal_loc = normal_loc$`ref-EC_cell`
test_loc = infercnv_obj@observation_grouped_cell_indices
test_loc = c(test_loc$epi,test_loc$`spike-EC_cell`)
anno.df = data.frame(
  CB = c(colnames(expr)[normal_loc],colnames(expr)[test_loc]),
  class = c(rep("normal",length(normal_loc)),rep("test",length(test_loc)))
)
table(anno.df$class)
gn = rownames(expr)
geneFile = read.table("geneFile.txt",header = F,sep = "\t",stringsAsFactors = F)
rownames(geneFile) = geneFile$V1
sub_geneFile =  geneFile[intersect(gn,geneFile$V1),]
expr=expr[intersect(gn,geneFile$V1),]
set.seed(19991109)
kmeans.result = kmeans(t(expr), 7)
##
table(kmeans.result$cluster)
groupFiles='F:\\NC_code\\单细胞\\GSE132465\\groupFiles.txt'   
groupFiles=read.table(groupFiles)
infercnv.labels=as.data.frame(kmeans.result$cluster)
infercnv.labels$V1=rownames(infercnv.labels)
groupFiles=merge(groupFiles,infercnv.labels,by='V1')
table(groupFiles[,2:3])
##
kmeans_df = data.frame(kmeans_class = kmeans.result$cluster)
kmeans_df$CB = rownames(kmeans_df)
kmeans_df = kmeans_df %>% inner_join(anno.df,by="CB") 
kmeans_df_s = arrange(kmeans_df,kmeans_class) 
rownames(kmeans_df_s) = kmeans_df_s$CB
kmeans_df_s$CB = NULL
kmeans_df_s$kmeans_class = as.factor(kmeans_df_s$kmeans_class)
top_anno = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = "NA",col="NA"),
                                              labels = 1:22,
                                              labels_gp = gpar(cex = 1.5)))
color_v = RColorBrewer::brewer.pal(8, "Dark2")[1:7]
names(color_v) = as.character(1:7)
left_anno = rowAnnotation(df = kmeans_df_s,
                          col=list(class=c("test"="#66C2A5","normal" = "#FC8D62"),
                                   ans_class=color_v))
pdf("try1.pdf",width = 15,height = 10)
ht = Heatmap(t(expr)[rownames(kmeans_df_s),],
             col = colorRamp2(c(0.4,1,1.6), c("#377EB8","#F0F0F0","#E41A1C")), 
             cluster_rows = F,cluster_columns = F,show_column_names = F,show_row_names = F,
             column_split = factor(sub_geneFile$V2, paste("chr",1:22,sep = "")),
             column_gap = unit(2, "mm"),
             
             heatmap_legend_param = list(title = "Modified expression",direction = "vertical",title_position = "leftcenter-rot",at=c(0.4,1,1.6),legend_height = unit(3, "cm")),
             
             top_annotation = top_anno,left_annotation = left_anno, 
             row_title = NULL,column_title = NULL)
draw(ht, heatmap_legend_side = "right")
dev.off()
###
getwd()
infercnv_obj = readRDS('.//infercnv_output//run.final.infercnv_obj')
expr = infercnv_obj@expr.data
data_cnv = as.data.frame(expr)
colnames(Epi_Normal_Seurat)
expr2 = expr-1
expr2 = expr2^2
CNV_score = as.data.frame(colMeans(expr2))
CNV_score$CB = rownames(CNV_score)
kmeans.result = kmeans(t(expr),7)
table(kmeans.result$cluster)
groupFiles='F:\\NC_code\\单细胞\\GSE132465\\groupFiles.txt'   
groupFiles=read.table(groupFiles)
infercnv.labels=as.data.frame(kmeans.result$cluster)
infercnv.labels$V1=rownames(infercnv.labels)
groupFiles=merge(groupFiles,infercnv.labels,by='V1')
table(groupFiles[,2:3])
meta = Epi_Normal_Seurat@meta.data %>%
  rownames_to_column(var='V1') %>%
  inner_join(groupFiles, by='V1') %>%
  column_to_rownames(var='V1')
meta$Group = ifelse(meta$`kmeans.result$cluster` == 2,'Normal','Tumor')
Epi_Normal_Seurat@meta.data = meta
DimPlot(Epi_Normal_Seurat,group.by = 'Group')
table(meta$Group)
#VlnPlot(Epi_Normal_Seurat,'NCL',group.by = 'Group')
#DotPlot(Epi_Normal_Seurat,'NCL',group.by = 'Group')
meta = meta[,-c(16,17,18,19)]
colnames(meta)[17] = 'Kmeans_clusters'
Epi_Normal_Seurat@meta.data = meta
Idents(Epi_Normal_Seurat) = Epi_Normal_Seurat@meta.data$Group
pdf('Dimplot_CNV_Tumor_Normal_Epi.pdf',width = 5,height = 4)
DimPlot(Epi_Normal_Seurat,
        cols = mycolor[1:2])+
  theme_bw()+
  theme(panel.grid = element_blank())
dev.off()
#####计算CNV评分
getwd()
obs = read.table(".\\infercnv_output\\infercnv.observations.txt", header=T)
ref = read.table(".\\infercnv_output\\infercnv.references.txt", header=T)
# 合并参考与观测细胞
expr = cbind(obs, ref)
expr.scale = scale(t(expr))
# 归一化 CNV 评分计算
tmp1 = sweep(expr.scale, 2, apply(expr.scale, 2, min),'-')
tmp2 = apply(expr.scale, 2, max) - apply(expr.scale,2,min)
expr_1 = t(2*sweep(tmp1, 2, tmp2, "/")-1)
cnv_score = as.data.frame(colSums(expr_1 * expr_1))
colnames(cnv_score) = "cnv_score"
cnv_score = rownames_to_column(cnv_score, var='cell')
cnv_score$cell = gsub("\\.", "-", cnv_score$cell)

meta = Epi_Normal_Seurat@meta.data %>%
  rownames_to_column(var='cell') %>%
  inner_join(cnv_score, by='cell') %>%
  column_to_rownames(var='cell')
###CNV评分画图
table(meta$Kmeans_clusters)
colnames(meta)[18] = 'Group'
pdf('CNV_Score.pdf',height = 6,width = 3)
ggboxplot(meta, "Kmeans_clusters", "cnv_score", fill = "Kmeans_clusters") + 
  scale_y_continuous(limits = c(0, 3000)) +  
  xlab("kmeans_Cluster") +  
  ylab("CNV Score") +
  theme(panel.border = element_rect(colour = "black", fill = NA, size = 0.5)) +
  theme(legend.position = "none")+
  scale_fill_manual(values = mycolor[1:7])
dev.off()
##小提琴图
Epi_Normal_Seurat@meta.data = meta
Epi_NCL_data = Seurat::FetchData(Epi_Normal_Seurat,
                                 vars = c('NCL','Group'))
Epi_NCL_data$Group = factor(Epi_NCL_data$Group,
                            levels = c('Normal','Tumor'))
table(Epi_NCL_data$Group)
vlnplot = ggplot(Epi_NCL_data, aes(x = Group, 
                                   y = NCL, 
                                   fill = Group)) +
  geom_violin(
    alpha = 0.7,       # 透明度（0-1）
    width = 0.8,       # 宽度（默认1）
    color = "black",   # 边框颜色
    lwd = 0.5          # 边框线宽
  ) +
  theme_bw()+
  geom_jitter(width = 0.1, alpha = 0.2, size = 0.1,color = 'gray50') +
  scale_fill_manual(values = c( "#317cb7",'#b6d7e8'))+
  theme(legend.position  = 'None',
        panel.grid = element_blank())+
  ylim(0,7)+
  geom_signif(comparisons=list(c(1,2)), #geom_signif()包出的statistical significance需要y的所有值都能显示时才能出现
              test="wilcox.test",      # wilcoxon rank test就是Mann-Whiteny U test
              #annotations = "****",
              map_signif_level = T,   #=F就是出具体的统计数值，=T就是用*来表示significance
              tip_length = 0.05,     #小竖线的高度
              size = 1,
              textsize = 5,
              y_position = c(max(Epi_NCL_data$NCL)*1.05) #统计描述线的粗细，长度及在y轴上的位置
  )+
  labs(x='')
vlnplot
Epi_NCL_data$expressed = ifelse(Epi_NCL_data$NCL>0,'expressed','not expressed')
proportation_data = Epi_NCL_data %>%
  group_by(Group,expressed) %>% 
  summarise(count = n()) %>% 
  mutate(percentage = count/sum(count)*100)
pie_grob_list = list()
pie_grob_list <- lapply(unique(proportation_data$Group), function(grp) {
  sub_data <- subset(proportation_data, Group == grp)
  pie_plot <- ggplot(sub_data, aes(x = "", y = percentage, fill = expressed)) +
    geom_bar(stat = "identity") +
    coord_polar("y") +
    theme_void()+
    theme(legend.position = 'none')+
    geom_text(aes(label = paste0(round(percentage,1),'%')),
              position = position_stack(vjust = 0.5),size = 4)+
    scale_fill_manual(values = c('expressed' = '#317cb7','not expressed' = '#b6d7e8'))
  ggplotGrob(pie_plot)
})
# 动态添加饼图到对应位置
for (i in seq_along(pie_grob_list)) {
  vlnplot <- vlnplot +
    annotation_custom(
      grob = pie_grob_list[[i]],
      xmin = i - 0.5,
      xmax = i + 0.5,
      ymin = max(Epi_NCL_data$NCL) * 1.2,
      ymax = max(Epi_NCL_data$NCL) * 1.6
    )
}
print(vlnplot)
ggsave(filename = 'Vlnplot_pie_NCL_exp_in_Epi.pdf',
       vlnplot,height = 5.5,width = 4.5)
##保存数据
Epi_Normal_Seurat@meta.data = meta
saveRDS(Epi_Normal_Seurat,'Epi_Normal_Seurat.rds')
