---
title: "GSE17538 Figure1a-b & FigureS1a-d"
format: html
editor: visual
---

```{r}
#| set the path
setwd('F:\\NC_code\\Figure1A-B_S1a-d')
inputFile = "GEO_17538_Matrix.txt" 
#| input the file:inputFile 
rt = read.table(inputFile, header=T, sep="\t", check.names=F)
#| Determine whether the data is log2, and if not, log2 is automatically taken for the value
qx = as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC = ( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
  rt[rt<0]=0
  rt=log2(rt+1)}
data = normalizeBetweenArrays(rt)
```

```{r}
#| run EPICï¼Œcalculate EPIC score of CAF
epic = EPIC(bulk = data)
CAF_EPIC = epic$cellFractions[,"CAFs"]
outTab = rbind(ID = colnames(epic$cellFractions), epic$cellFractions)
write.table(outTab, file="score.EPIC.txt", sep="\t", quote=F, col.names=F)
```

```{r}
#| run MCPcounter,calculate MCPcounter of CAF
MCPcounter.estimate = MCPcounter.estimate(
  data,
  featuresType = "HUGO_symbols",
  probesets = read.table("MCPcounter.probesets.txt",
                       sep="\t",
                       stringsAsFactors=FALSE,
                       colClasses="character"),
  genes = read.table("MCPcounter.genes.txt",
                     sep = "\t",
                     stringsAsFactors = FALSE,
                     header = TRUE,
                     colClasses = "character",
                     check.names = FALSE)
)
CAF_MCPcounter = MCPcounter.estimate["Fibroblasts",]
outTab = rbind(ID=colnames(MCPcounter.estimate), MCPcounter.estimate)
write.table(outTab, 
            file="score.MCPcounter.txt", 
            sep="\t", 
            quote=F, 
            col.names=F)
```

```{r}
#| run estimate to calculate tumor environment score
filterCommonGenes(input.f = "GEO_17538_Matrix.txt", 
                  output.f = "commonGenes.gct", 
                  id = "GeneSymbol")
estimateScore(input.ds = "commonGenes.gct",
              output.ds = "estimateScore.gct")
```

```{r}
#| Organize the scores of the tumor microenvironment and output the scores for each sample
scores = read.table("estimateScore.gct", 
                    skip=2, 
                    header=T)
rownames(scores) = scores[,1]
scores = t(scores[,3:ncol(scores)])
rownames(scores) = gsub("\\.", "\\-", rownames(scores))
StromalScore = scores[,"StromalScore"]
out = rbind(ID=colnames(scores), scores)
write.table(out, 
            file="score.estimate.txt", 
            sep="\t", 
            quote=F, 
            col.names=F)
```

```{r}
#| Output CAF scoring
CAF_score = cbind(CAF_EPIC, CAF_MCPcounter, StromalScore)
outTab = rbind(ID=colnames(CAF_score), CAF_score)
write.table(outTab, 
            file="GEO_17538.CAF.txt", 
            sep="\t", 
            quote=F, 
            col.names=F)
```

```{r}
#| plot_boxplot  
plot_boxplot = function(data, 
                        x_col,
                        y_col, 
                        fill_col, 
                        low_color = "#77BBFF", 
                        high_color = "#FFA3A3", 
                        alpha = 0.4, 
                        width = 0.6, 
                        cex = 0.5, 
                        outlier_color = "black",
                        jitter_width = 0.2, 
                        jitter_size = 1.5, 
                        ylab = "MCP_counter Score", 
                        xlab = "", 
                        base_size = 15, 
                        comparisons = list(c(1, 2)), 
                        test = "wilcox.test", 
                        map_signif_level = FALSE,
                        tip_length = 0.02, 
                        size = 1, 
                        textsize = 5, 
                        group_labels = c("low", "high"),
                        group_n = c(243, 211),           
                        custom_text = NULL,              
                        p_value_y = NULL,                
                        text_offset = 0.1) {             
  
  
  x_labels = paste0(group_labels, 
                    "\n(n = ", group_n, ")")
  
  p = ggplot(data, 
             aes(x = .data[[x_col]], y = .data[[y_col]], fill = .data[[fill_col]])) +
    scale_color_manual(values = c(low = low_color, high = high_color)) +
    scale_fill_manual(values = c(low = low_color, high = high_color)) +
    stat_boxplot(geom = 'errorbar', 
                 width = 0.2, 
                 cex = cex) +
    geom_boxplot(alpha = alpha, 
                 width = width, 
                 cex = cex, 
                 outlier.color = outlier_color) +
    geom_jitter(aes(color = .data[[fill_col]]), 
                width = jitter_width, 
                size = jitter_size) +
    theme_classic(base_size = base_size) +
    ylab(ylab) + 
    xlab(xlab) +
    scale_x_discrete(labels = x_labels)+
    theme(legend.position = 'none')
  
  
  if (is.null(p_value_y)) {
    y_max = max(data[[y_col]], na.rm = TRUE)
    p_value_y = y_max * 1.05 
  }
  
  p = p + geom_signif(
    comparisons = comparisons, 
    test = test, 
    map_signif_level = map_signif_level,
    tip_length = tip_length,
    size = size,
    textsize = textsize,
    y_position = p_value_y  
  )
  
  
  if (!is.null(custom_text)) {
    text_y = p_value_y * (1 + text_offset)  
    p = p + annotate(
      "text",
      x = mean(1:length(comparisons[[1]])),  
      y = text_y,
      label = custom_text,
      size = textsize,
      vjust = 0  
    )
  }
  
  return(p)
}
```

```{r}
#| Figure1A MCPcounter Score
time = fread('GSE17538_time.txt',
             data.table = F,
             header = T)
CAF_Score = fread('GEO_17538.CAF.txt',
                  data.table = F,
                  header = T) %>% 
  subset(.$ID %in% time$id) %>% .[match(time$id,.$ID),]
identical(CAF_Score$ID,time$id)
inputdata = cbind(time,
                  CAF_Score$CAF_MCPcounter)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/12
#| The optimal cutoff value is calculated based on the surv cutpoint function
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(
                    MCP_score = inputdata$Score,
                    Group = res.cat$Score)
plot1 = plot_boxplot(boxplot_inputdata, 
             x_col = "Group", 
             y_col = "MCP_score", 
             fill_col = "Group",
             group_n = c(134, 98),
             custom_text = "GSE17538",
             text_offset = 0.05)
ggsave('.//MCP_counterScore_GSE17538.pdf',plot1,height = 6,width = 4)
```

```{r}
#| Figure1B MCPcounter Survival
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
#| Extract HR and 95% CI
HR = round(cox_summary$coefficients[2], 2)
HR_CI = round(cox_summary$conf.int[3:4], 3)
pdf('GSE17538_MCPcounter_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           pval.size=3,
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#77BBFF","#FFA3A3"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_MAPcounter",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',pValue,
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1],
                         "-", HR_CI[2]))
dev.off()
```

```{r}
#| FigureS1a EPIC score
inputdata = cbind(time,CAF_Score$CAF_EPIC)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/12
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(
                EPIC_score = inputdata$Score,
                Group = res.cat$Score)
table(boxplot_inputdata$Group)
plotS1a = plot_boxplot(boxplot_inputdata, 
                     x_col = "Group", 
                     y_col = "EPIC_score", 
                     fill_col = "Group",
                     group_n = c(163, 69),
                     custom_text = "EPIC",
                     text_offset = 0.05,
                     low_color = "#F3CE40", 
                     high_color = "#0073C2",
                     ylab = "EPIC Score")
ggsave('.//EPIC_Score_GSE17538.pdf',plotS1a,height = 6,width = 4)
```

```{r}
#| FigureS1b EPIC Survival
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
HR = round(cox_summary$coefficients[2], 2)  
HR_CI = round(cox_summary$conf.int[3:4], 3) 
pdf('GSE17538_EPIC_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#F3CE40","#0073C2"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_EPIC",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',round(pValue,3),
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
```

```{r}
#| FigureS1c ESTIMATE score
inputdata = cbind(time,CAF_Score$StromalScore)
colnames(inputdata)[4] = 'Score'
inputdata$futime = inputdata$futime/12
res.cut = surv_cutpoint(inputdata, 
                        time = "futime", 
                        event = "fustat",
                        variables =c("Score"))
res.cat = surv_categorize(res.cut)
res.cat[,"Score"] = factor(res.cat[,"Score"], levels=c("low","high"))
boxplot_inputdata = data.frame(
  Stromal_score = inputdata$Score,
  Group = res.cat$Score)
table(boxplot_inputdata$Group)
plot4 = plot_boxplot(boxplot_inputdata, 
                     x_col = "Group", 
                     y_col = "Stromal_score", 
                     fill_col = "Group",
                     group_n = c(150, 82),
                     custom_text = "ESTIMATE",
                     text_offset = 0.18,
                     low_color = "#CFC3D9", 
                     high_color = "#A5C1A8",
                     ylab = "Stromal Score")
ggsave('.//ESTIMATE_Score_GSE17538.pdf',plot4,height = 6,width = 4)
```

```{r}
#| FigureS1d ESTIMATE Survival
fit = survfit(Surv(futime, fustat) ~ Score, data = res.cat)
diff = survdiff(Surv(futime, fustat) ~ Score,data =res.cat)
pValue = round(1-pchisq(diff$chisq, df=1),5)
fit_cox = coxph(Surv(futime, fustat) ~ Score, data = res.cat)
cox_summary = summary(fit_cox)
HR = round(cox_summary$coefficients[2], 2)  
HR_CI = round(cox_summary$conf.int[3:4], 3) 
pdf('GSE17538_ESTIMATE_Survival.pdf',height = 4,width = 8,onefile = F)
ggsurvplot(fit,
           data=res.cat,
           conf.int=T,
           #pval='',
           pval.size=3,
           #legend.title=Score,
           #legend.labs=c("low","high"),
           xlab="Time(years)",
           ylab="Overall survival",
           palette=c("#CFC3D9","#A5C1A8"),#DAEDFF,#FFE7E7
           break.time.by=2,
           risk.table=T,
           risk.table.title="Number at risk",
           risk.table.height=.35,
           ggtheme = theme_bw(),
           legend.title = "CAF_ESTIMATE",
           legend.labs = c("LowScore", "HighScore"),
           pval = paste0('P = ',round(pValue,3),
                         "\nHR = ", HR, 
                         "\n95%CI:", HR_CI[1], "-", HR_CI[2]))
dev.off()
```
